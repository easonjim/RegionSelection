<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.Data</name>
    </assembly>
    <members>
        <member name="M:MySoft.Data.IPaging.Prefix(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:MySoft.Data.IPaging.Suffix(System.String)">
            <summary>
            设置后缀
            </summary>
            <param name="suffix"></param>
        </member>
        <member name="M:MySoft.Data.IPaging.End(System.String)">
            <summary>
            设置结尾
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#Prefix(System.String)">
            <summary>
            前置值如 top n
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#Suffix(System.String)">
            <summary>
            结尾值如 row_number()
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#End(System.String)">
            <summary>
            设置值如 limit n
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList``1">
            <summary>
            返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToSingle``1">
            <summary>
            返回一个实体
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery``1(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.CreateQuery``1">
            <summary>
            创建一个跟当前相同的子查询
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GroupBy(MySoft.Data.Field[])">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.OrderBy(MySoft.Data.Field[],System.Boolean)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="fields"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetTop(System.Int32)">
            <summary>
            选取前N条数据
            </summary>
            <param name="topSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Select(MySoft.Data.Field[])">
            <summary>
            选择输出的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Select(MySoft.Data.IFieldFilter)">
            <summary>
            选择被排除以外的列（用于列多时排除某几列的情况）
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Where(MySoft.Data.WhereClip)">
            <summary>
            注入当前查询的条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Union(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.UnionAll(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Union(MySoft.Data.QuerySection{`0},System.Boolean)">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <param name="isUnionAll"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Having(MySoft.Data.WhereClip)">
            <summary>
            进行Having操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Distinct">
            <summary>
            进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetPage(System.Int32)">
            <summary>
            返回一个分页处理的Page节
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToSingle">
            <summary>
            返回一个实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult``1(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult``1">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToReader(System.Int32,System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToReader">
            <summary>
            返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToDataSet(System.Int32,System.Int32)">
            <summary>
            返回一个DataSet
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToDataSet">
            <summary>
            返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTable(System.Int32,System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTable">
            <summary>
            返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToScalar``1">
            <summary>
            返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToScalar">
            <summary>
            返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Count">
            <summary>
            返回当前查询记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetCacheKey(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            获取缓存的Key
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetCache``1(System.String,System.String)">
            <summary>
            获取缓存信息
            </summary>
            <typeparam name="CacheType"></typeparam>
            <param name="prefix"></param>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SetCache``1(System.String,System.String,System.Object)">
            <summary>
            设置缓存信息
            </summary>
            <typeparam name="CacheType"></typeparam>
            <param name="prefix"></param>
            <param name="cacheKey"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListPage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListPage``1(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToDataSetPage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.QuerySection`1.FromSection">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:Norm.Responses.PreviousErrorResponse">
            <summary>
            The previous error response.
            </summary>
        </member>
        <member name="T:Norm.Responses.BaseStatusMessage">
            <summary>
            Represents a message with an Ok status
            </summary>
        </member>
        <member name="T:Norm.BSON.IExpando">
            <summary>
            If this interface is implemented on your class,
            the serializer will store values that cannot be mapped to other properties via the indexer.
            </summary>
        </member>
        <member name="M:Norm.BSON.IExpando.AllProperties">
            <summary>
            The enumeration of properties on this flyweight that are not statically defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.IExpando.Delete(System.String)">
            <summary>
            Remove a property that isn't defined.
            </summary>
            <param retval="propertyName"></param>
        </member>
        <member name="P:Norm.BSON.IExpando.Item(System.String)">
            <summary>
            Get/set a property that is not statically defined.
            </summary>
            <param retval="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Responses.BaseStatusMessage.AllProperties">
            <summary>
            Additional, non-static properties of this message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.BaseStatusMessage.WasSuccessful">
            <summary>
            This is the raw value returned from the response. 
            It is required for serializer support, use "WasSuccessful" if you need a boolean value.
            </summary>
            <remarks>This maps to the "OK" value of the response which can be a decimal (pre-1.5.2) or boolean (1.5.2+).</remarks>
        </member>
        <member name="M:Norm.Responses.PreviousErrorResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.PreviousErrorResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.NumberOfErrors">
            <summary>
            Gets or sets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.NumberOfOperationsAgo">
            <summary>
            Gets or sets the number of operations ago.
            </summary>
            <value>The number of operations ago.</value>
        </member>
        <member name="T:Norm.Responses.ListDatabasesResponse">
            <summary>
            The structure for the response to the "listdatabases" command.
            </summary>
        </member>
        <member name="P:Norm.Responses.ListDatabasesResponse.TotalSize">
            <summary>?? Gets the total size of all the databases returned?? </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ListDatabasesResponse.Databases">
            <summary>The databases.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ExplainResponse">
            <summary>
            The explain response.
            </summary>
        </member>
        <member name="T:Norm.Responses.ExplainPlan">
            <summary>
            ExplainPlan plan.
            </summary>
        </member>
        <member name="M:Norm.Responses.ExplainPlan.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ExplainPlan"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.StartKey">
            <summary>
            Gets or sets the start fieldSelectionExpando.
            </summary>
            <value>The start fieldSelectionExpando.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.EndKey">
            <summary>
            Gets or sets the end fieldSelectionExpando.
            </summary>
            <value>The end fieldSelectionExpando.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.IndexBounds">
            <summary>
            Gets or sets the index bounds.
            </summary>
            <value>The index bounds.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.ExplainStartKey">
            <summary>
            Gets the explain start fieldSelectionExpando list.
            </summary>
            <value>The explain start fieldSelectionExpando.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.ExplainEndKey">
            <summary>
            Gets the explain end fieldSelectionExpando list.
            </summary>
            <value>The explain end fieldSelectionExpando.</value>
        </member>
        <member name="M:Norm.Responses.ExplainResponse.#cctor">
            <summary>
            Explains the plan.
            </summary>
        </member>
        <member name="M:Norm.Responses.ExplainResponse.AllProperties">
            <summary>
            Additional, non-static properties of this message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.NumberOfScannedObjects">
            <summary>
            Gets the number of objects that would be scanned by this query.
            </summary>
            <value>The number of objects that will be scanned.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.NumberScanned">
            <summary>
            Gets or sets the number scanned.
            </summary>
            <value>The number scanned.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.Milliseconds">
            <summary>
            Gets or sets the milliseconds.
            </summary>
            <value>The milliseconds.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.OldPlan">
            <summary>
            Gets or sets the old explain plan.
            </summary>
            <value>The old plan.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.AllPlans">
            <summary>
            Gets or sets all explain plans.
            </summary>
            <value>All plans.</value>
        </member>
        <member name="T:Norm.Protocol.MongoOp">
            <summary>
            The mongo op.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Reply">
            <summary>
            Reply to a client request. responseTo is set
            </summary>
            <remarks>
            Infrastructure. This is reserved for the database, 
            don't use it when creating a message. 
            </remarks>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Message">
            <summary>
            generic msg command followed by a string
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Update">
            <summary>
            update document
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Insert">
            <summary>
            Insert new document.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.GetByOID">
            <summary>
            Maybe NOT USED?
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Query">
            <summary>
            Query a collection.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.GetMore">
            <summary>
            Get more data from a query.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Delete">
            <summary>
            Delete documents.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.KillCursors">
            <summary>
            Tell the database that the client is done with a cursor.
            </summary>
        </member>
        <member name="T:Norm.Protocol.Messages.QueryMessage`2">
            <summary>
            A query to the db.
            </summary>
            <typeparam retval="T">The response type.</typeparam>
            <typeparam retval="U">The request type.</typeparam>
        </member>
        <member name="T:Norm.Protocol.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:Norm.Protocol.Message._collection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._connection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._messageLength">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._requestID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._responseID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Protocol.Message.#ctor(Norm.IConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Message"/> class.
            </summary>
            <param retval="connection">
            The connection.
            </param>
            <param retval="fullyQualifiedCollName">
            The fully qualified coll retval.
            </param>
        </member>
        <member name="M:Norm.Protocol.Messages.QueryMessage`2.#ctor(Norm.IConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.QueryMessage`2"/> class.
            </summary>
            <param retval="connection">The connection.</param>
            <param retval="fullyQualifiedCollName">Name of the fully qualified coll.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.QueryMessage`2.Execute">
            <summary>
            Causes this message to be sent and a repsonse to be generated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Protocol.Messages.QueryMessage`2.GetPayload">
            <summary>
            Construct query and order by BSON.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.Query">
            <summary>
            A BSON query.
            </summary>
            <value>The Query property gets/sets the Query data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.FieldSelection">
            <summary>
            The fields to select from each document in the current collection.
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.OrderBy">
            <summary>This defines </summary>
            <value>The OrderBy property gets/sets the OrderBy data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.NumberToTake">
            <summary>
            Gets or sets the number of documents to take.
            </summary>
            <value>The number of documents to take.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.NumberToSkip">
            <summary>
            The number of documents to skip before starting to return documents.
            </summary>
            <value>The Map property gets/sets the Map data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.QueryMessage`2.QueryOptions">
            <summary>
            The available options when creating a query against Mongo.
            </summary>
        </member>
        <member name="T:Norm.Mongo">
            <summary>
            The primary class for database connections and interaction
            </summary>
        </member>
        <member name="T:Norm.IMongo">
            <summary>
            <see cref="T:Norm.Mongo"/>
            </summary>
        </member>
        <member name="M:Norm.Mongo.#ctor(Norm.IConnectionProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Mongo"/> class.
            </summary>
            <param retval="provider">The provider.</param>
            <param retval="options">The options.</param>
        </member>
        <member name="M:Norm.Mongo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Mongo"/> class.
            </summary>
            <param retval="db">The db.</param>
            <param retval="server">The server.</param>
            <param retval="port">The port.</param>
            <param retval="options">The options.</param>
        </member>
        <member name="M:Norm.Mongo.Create(System.String)">
            <summary>
            Parses a connection.
            </summary>
            <param retval="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.Create(System.String,System.String)">
            <summary>
            The parse connection.
            </summary>
            <param retval="connectionString">The connection string.</param>
            <param retval="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Norm.Mongo.GetCollection``1">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam retval="T">Type of collection</typeparam>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.GetCollection``1(System.String)">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam retval="T">Type of collection</typeparam>
            <param retval="collectionName">The collection retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.LastError">
            <summary>
            The last error.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Mongo.ServerConnection">
            <summary>
            The server connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Mongo.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param retval="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:Norm.Mongo.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Norm.Mongo"/> class. 
            </summary>
        </member>
        <member name="P:Norm.Mongo.Database">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="P:Norm.Mongo.ConnectionProvider">
            <summary>
            Gets ConnectionProvider.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationMap">
            <summary>
            Represents configuration mapping types names to database field names
            </summary>
        </member>
        <member name="T:Norm.Configuration.IMongoConfigurationMap">
            <summary>
            Defines a configuration map
            </summary>
        </member>
        <member name="T:Norm.IHideObjectMembers">
            <summary>
            This hides the object members below for things like fluent configuration
            where "ToString" makes no sense.
            </summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.GetType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.GetHashCode">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.ToString">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.Equals(System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.For``1(System.Action{Norm.Configuration.ITypeConfiguration{``0}})">
            <summary>
            Fluently define a configuration for the specified type. This will be merged with any existing types.
            </summary>
            <typeparam retval="T">Object type under property mapping</typeparam>
            <param retval="typeConfiguration">The type configuration.</param>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.RemoveFor``1">
            <summary>
            Remove all configuration for the specified type.
            </summary>
            <remarks>Supports unit testing, use at your own risk!</remarks>
            <typeparam retval="T">The type for which to remove fluent mappings.</typeparam>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetCollectionName(System.Type)">
            <summary>
            Gets the retval of the type's collection.
            </summary>
            <param retval="type">The type.</param>
            <returns>The get collection retval.</returns>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetConnectionString(System.Type)">
            <summary>
            Gets the connection string.
            </summary>
            <param retval="type">The type.</param>
            <returns>The get connection string.</returns>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Gets the property alias for a type.
            </summary>
            <param retval="type">The type.</param>
            <param retval="propertyName">Name of the type's property.</param>
            <returns>
            Type's property alias if configured; otherwise null
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.For``1(System.Action{Norm.Configuration.ITypeConfiguration{``0}})">
            <summary>
            Configures properties for type T
            </summary>
            <typeparam retval="T">Type to configure</typeparam>
            <param retval="typeConfigurationAction">The type configuration action.</param>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.TypeConverterFor``2">
            <summary>
            Configures a type converter for type TClr
            </summary>
            <remarks>A type converter is used to convert any .NET CLR type into a CLR type that Mongo BSON
            understands. For instance turning a CultureInfo into a string and back again. This method registers
            known converters.</remarks>
            <typeparam name="TClr"></typeparam>
            <typeparam name="TCnv"></typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.IsDbReference(System.Type)">
            <summary>
            Checks to see if the object is a DbReference. If it is, we won't want to override $id to _id.
            </summary>
            <param retval="type">The type of the object being serialized.</param>
            <returns>True if the object is a DbReference, false otherwise.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Gets the property alias for a type.
            </summary>
            <remarks>
            If it's the ID Property, returns "_id" regardless of additional mapping.
            If it's not the ID Property, returns the mapped retval if it exists.
            Else return the original propertyName.
            </remarks>
            <param retval="type">The type.</param>
            <param retval="propertyName">Name of the type's property.</param>
            <returns>
            Type's property alias if configured; otherwise null
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetTypeDescriminator(System.Type)">
            <summary>
            Gets the fluently configured discriminator type string for a type.
            </summary>
            <param name="type">The type for which to get the discriminator type.</param>
            <returns>The discriminator type string for the given given.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetCollectionName(System.Type)">
            <summary>
            Gets the retval of the type's collection.
            </summary>
            <param retval="type">The type.</param>
            <returns>The get collection retval.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetConnectionString(System.Type)">
            <summary>
            Gets the connection string.
            </summary>
            <param retval="type">The type.</param>
            <returns>The get connection string.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.RemoveFor``1">
            <summary>
            Removes the mapping for this type.
            </summary>
            <remarks>
            Added to support Unit testing. Use at your own risk!
            </remarks>
            <typeparam retval="T"></typeparam>
        </member>
        <member name="T:Norm.Commands.Qualifiers.LessOrEqualQualifier">
            <summary>
            The less or equal qualifier.
            </summary>
        </member>
        <member name="T:Norm.BSON.QualifierCommand">
            <summary>
            The qualifier command.
            </summary>
        </member>
        <member name="T:Norm.BSON.Command">
            <summary>
            An abstract command
            </summary>
        </member>
        <member name="M:Norm.BSON.Command.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.Command"/> class.
            </summary>
            <param retval="commandName">Name of the command.</param>
            <param retval="value">The value.</param>
        </member>
        <member name="P:Norm.BSON.Command.CommandName">
            <summary>
            Gets or sets CommandName.
            </summary>
        </member>
        <member name="P:Norm.BSON.Command.ValueForCommand">
            <summary>
            Gets or sets ValueForCommand.
            </summary>
        </member>
        <member name="M:Norm.BSON.QualifierCommand.#ctor(System.String,System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.LessOrEqualQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.LessOrEqualQualifier"/> class.
            </summary>
            <param retval="value">The value.</param>
        </member>
        <member name="T:Norm.Commands.IncrementOperation">
            <summary>
            The increment operation.
            </summary>
        </member>
        <member name="T:Norm.BSON.ModifierCommand">
            <summary>
            The modifier command.
            </summary>
        </member>
        <member name="M:Norm.BSON.ModifierCommand.#ctor(System.String,System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.IncrementOperation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.IncrementOperation"/> class.
            </summary>
            <param retval="amountToIncrement">The amount to increment.</param>
        </member>
        <member name="T:Norm.Commands.Modifiers.IModifierExpression`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Push``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PushAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.AddToSet``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Pull``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PopFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PopLast(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PullAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:MySoft.Data.Design.PrimaryKeyAttribute">
            <summary>
            表示主键
            </summary>
        </member>
        <member name="T:MySoft.Data.ITableRelation`1">
            <summary>
            表关系类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.GroupByClipBuilder">
            <summary>
            GroupByClip构建类
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClipBuilder.#ctor">
            <summary>
            实例化GroupByClipBuilder
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClipBuilder.#ctor(MySoft.Data.GroupByClip[])">
            <summary>
            实例化GroupByClipBuilder
            </summary>
            <param name="groupBy"></param>
        </member>
        <member name="M:MySoft.Data.GroupByClipBuilder.Add(MySoft.Data.GroupByClip)">
            <summary>
            增加一个分组
            </summary>
            <param name="groupBy"></param>
        </member>
        <member name="M:MySoft.Data.GroupByClipBuilder.Add(MySoft.Data.Field[])">
            <summary>
            增加一组分组
            </summary>
            <param name="fields"></param>
        </member>
        <member name="P:MySoft.Data.GroupByClipBuilder.GroupByClip">
            <summary>
            返回分组
            </summary>
        </member>
        <member name="T:MySoft.Data.UpdateCreator`1">
            <summary>
            更新创建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.UpdateCreator">
            <summary>
            更新创建器
            </summary>
        </member>
        <member name="T:MySoft.Data.WhereCreator`1">
            <summary>
            Creator 基类
            </summary>
        </member>
        <member name="T:MySoft.Data.TableCreator`1">
            <summary>
            Table创建器
            </summary>
            <typeparam name="TCreator"></typeparam>
        </member>
        <member name="M:MySoft.Data.TableCreator`1.#ctor(System.String,System.String)">
            <summary>
            实例化TableCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.TableCreator`1.#ctor(MySoft.Data.Table)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:MySoft.Data.TableCreator`1.Table">
            <summary>
            返回table
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.#ctor(System.String,System.String)">
            <summary>
            实例化BaseCreator
            </summary>
            <param name="tableName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.#ctor(MySoft.Data.Table)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.AddWhere(MySoft.Data.WhereClip)">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.AddWhere(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.AddWhere(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.WhereCreator`1.AddWhere(System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.Data.WhereCreator`1.Where">
            <summary>
            返回条件
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator(System.String)">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.#ctor(System.String)">
            <summary>
            实例化UpdateCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化UpdateCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.String,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(MySoft.Data.Field[],System.Object[])">
            <summary>
            添加一个数据
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.String[],System.Object[])">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldNames"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.RemoveUpdate(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.RemoveUpdate(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator`1.NewCreator">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator`1.Set(`0,System.Boolean)">
            <summary>
            设置表和实体信息
            </summary>
            <param name="entity"></param>
            <param name="useKeyWhere"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Field`1">
            <summary>
            用于实体内的Field操作
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.Field">
            <summary>
            用于实体内的Field操作
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.IField">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySoft.Data.Field.All">
            <summary>
            字段*
            </summary>
        </member>
        <member name="M:MySoft.Data.Field.Set(System.Object)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Set(MySoft.Data.DbValue)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Set(MySoft.Data.Field)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create(System.String,MySoft.Data.QueryCreator)">
            <summary>
            创建一个内联字段
            </summary>
            <param name="fieldName"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create``1(System.String,MySoft.Data.QuerySection{``0})">
            <summary>
            创建一个内联字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create``1(System.String,MySoft.Data.TableRelation{``0})">
            <summary>
            创建一个内联字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String,System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="propertyName"></param>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:MySoft.Data.Field.Distinct">
            <summary>
            对字段进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Count">
            <summary>
            对字段进行Count操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Sum">
            <summary>
            对字段进行Sum操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Avg">
            <summary>
            对字段进行Avg操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Max">
            <summary>
            对字段进行Max操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Min">
            <summary>
            对字段进行Min操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.As(System.String)">
            <summary>
            更改字段的别名
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.At(System.String)">
            <summary>
            更改字段所在表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.At(MySoft.Data.Table)">
            <summary>
            更改字段所在表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Func(System.String,System.String[])">
            <summary>
            函数处理
            </summary>
            <param name="function"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Func(System.String,MySoft.Data.Field[])">
            <summary>
            函数处理
            </summary>
            <param name="function"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.IsNull">
            <summary>
            返回一个值为null的条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Contains(System.String)">
            <summary>
            指定value进行模糊查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Like(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.StartsWith(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.EndsWith(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Between(System.Object,System.Object)">
            <summary>
            进行Between操作
            </summary>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Field)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Table,MySoft.Data.Field)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.QuerySection{``0})">
            <summary>
            进行In操作,query为一个子查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.TableRelation{``0})">
            <summary>
            进行In操作,relation为一个关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In(System.Object[])">
            <summary>
            进行In子查询操作
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In(MySoft.Data.QueryCreator)">
            <summary>
            进行In子查询操作
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.CreateWhereClip(MySoft.Data.Field,System.String,System.Object)">
            <summary>
            创建一个参数方式的WhereClip
            </summary>
            <param name="field"></param>
            <param name="join"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Field.Name">
            <summary>
            获取真实字段名
            </summary>
        </member>
        <member name="P:MySoft.Data.Field.OriginalName">
            <summary>
            获取原始的字段名
            </summary>
        </member>
        <member name="P:MySoft.Data.Field.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="T:MySoft.Data.DbSession">
            <summary>
            会话操作对象
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterDecryptor(MySoft.Data.DecryptEventHandler)">
            <summary>
            注册解密的Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterLogger(MySoft.Data.Logger.IExecuteCommand)">
            <summary>
            注册日志依赖
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterCache(MySoft.Cache.IDataCache)">
            <summary>
            注册缓存依赖
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.SetCommandTimeout(System.Int32)">
            <summary>
            设置命令超时时间
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:MySoft.Data.Cache.ICacheDependent">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="M:MySoft.Data.Cache.ICacheDependent.AddCache``1(System.String,``0,System.Int32)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:MySoft.Data.Cache.ICacheDependent.RemoveCache``1(System.String)">
            <summary>
            移除缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
        </member>
        <member name="M:MySoft.Data.Cache.ICacheDependent.GetCache``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="F:MySoft.Data.DbSession.Default">
            <summary>
            默认会话对象
            </summary>
        </member>
        <member name="M:MySoft.Data.DbSession.#ctor(System.String)">
            <summary>
             指定配制节名实例化一个Session会话
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.#ctor(MySoft.Data.DbProvider)">
            <summary>
            指定驱动实例化一个Session会话
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(System.String)">
            <summary>
            设置指定配制节名Session会话为默认会话
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(MySoft.Data.DbProvider)">
            <summary>
            设置指定驱动Session会话为默认会话
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(MySoft.Data.DbSession)">
            <summary>
            设置指定的会话为默认会话
            </summary>
            <param name="dbSession"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetProvider(System.String)">
            <summary>
            设置新的驱动
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetProvider(MySoft.Data.DbProvider)">
            <summary>
            设置新的驱动
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTrans">
            <summary>
            开始一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            开始一个事务
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.SetTransaction(System.Data.Common.DbTransaction)">
            <summary>
            设置一个外部事务
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTransaction">
            <summary>
            开始一个外部事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始一个外部事务
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            设置一个外部链接
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.CreateConnection">
            <summary>
            创建一个外部连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Count``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Count``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(MySoft.Data.TableRelation{``0})">
            <summary>
            返回一个Query节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(MySoft.Data.Table)">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(System.String)">
            <summary>
            返回一个From节，并可指定其别名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromSql(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromProc(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromSql(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromProc(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Execute(MySoft.Data.InsertCreator)">
            <summary>
            插入数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Execute``1(MySoft.Data.InsertCreator,``0@)">
            <summary>
             插入数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="creator"></param>
            <param name="identityValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Execute(MySoft.Data.DeleteCreator)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Execute(MySoft.Data.UpdateCreator)">
            <summary>
            更新数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From(MySoft.Data.QueryCreator)">
            <summary>
             返回一个Query节
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginBatch">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginBatch(System.Int32)">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            删除指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            删除符合条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            更新指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            更新指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
            插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Serialization(MySoft.Data.WhereClip)">
            <summary>
            返回最终条件的SQL
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Serialization(MySoft.Data.OrderByClip)">
            <summary>
            返回最终排序的SQL
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterDecryptor(MySoft.Data.DecryptEventHandler)">
            <summary>
            注册解密的Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterLogger(MySoft.Data.Logger.IExecuteCommand)">
            <summary>
            注册日志依赖
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterCache(MySoft.Cache.IDataCache)">
            <summary>
            注册缓存依赖
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetCommandTimeout(System.Int32)">
            <summary>
            设置命令操作超时时间
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetThrowError(System.Boolean)">
            <summary>
            设置是否抛出异常
            </summary>
            <param name="throwError"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Table,MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Table,MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(``0,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Table,``0,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.AddCache``1(System.String,``0,System.Int32)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.RemoveCache``1(System.String)">
            <summary>
            移除缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.GetCache``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Protocol.Messages.MapReduceMessage">
            <summary>
            The map reduce message.
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.MapReduce">
            <summary>TODO::Description.</summary>
            <value>The MapReduce property gets/sets the MapReduce data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Map">
            <summary>TODO::Description.</summary>
            <value>The Map property gets/sets the Map data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Reduce">
            <summary>TODO::Description.</summary>
            <value>The Reduce property gets/sets the Reduce data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.KeepTemp">
            <summary>TODO::Description.</summary>
            <value>The KeepTemp property gets/sets the KeepTemp data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Out">
            <summary>TODO::Description.</summary>
            <value>The Out property gets/sets the Out data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Limit">
            <summary>TODO::Description.</summary>
            <value>The Limit property gets/sets the Limit data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Query">
            <summary>
            Gets or sets the Query
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Finalize">
            <summary>TODO::Description.</summary>
            <value>The Finalize property gets/sets the Finalize data member.</value>
        </member>
        <member name="M:Norm.GridFS.GridFileCollection.FindOne``1(``0)">
            <summary>
            Finds and returns the first file that matches the criteria.
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.GridFS.GridFileCollection.Find``1(``0)">
            <summary>
            Returns all the files that match the criteria.
            </summary>
            <param name="matchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.GridFS.GridFileCollection.Delete(Norm.ObjectId)">
            <summary>
            Delete a file with the specifiedID.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="IDofFileToDelete"></param>
        </member>
        <member name="T:Norm.PooledConnectionProvider">
            <summary>
            The pooled connection provider.
            </summary>
        </member>
        <member name="T:Norm.ConnectionProvider">
            <summary>
            Connectin provider
            </summary>
        </member>
        <member name="T:Norm.IConnectionProvider">
            <summary>
            The i connection provider.
            </summary>
        </member>
        <member name="M:Norm.IConnectionProvider.Open(System.String)">
            <summary>
            The open.
            </summary>
            <param retval="options">
            The options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.IConnectionProvider.Close(Norm.IConnection)">
            <summary>
            The close.
            </summary>
            <param retval="connection">
            The connection.
            </param>
        </member>
        <member name="P:Norm.IConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="M:Norm.ConnectionProvider.Open(System.String)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ConnectionProvider.Close(Norm.IConnection)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ConnectionProvider.CreateNewConnection">
            <summary>
            Creates the new connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionProvider.Authenticate(Norm.IConnection)">
            <summary>
            Authenticates the specified connection.
            </summary>
            <param retval="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.ConnectionProvider.ConnectionString">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.PooledConnectionProvider"/> class.
            </summary>
            <param retval="builder">The builder.</param>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Open(System.String)">
            <summary>
            Opens the connection.
            </summary>
            <param retval="options">Connection options.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param retval="connection">The connection.</param>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Cleanup">
            <summary>
            Cleans up this instance.
            </summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.IsAlive(Norm.IConnection)">
            <summary>
            Determines whether the connection is alive.
            </summary>
            <param retval="connection">The connection.</param>
            <returns>True if alive; otherwise false.</returns>
        </member>
        <member name="M:Norm.PooledConnectionProvider.CheckFreeConnectionsAlive">
            <summary>
            The check free connections alive.
            </summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.DisposeInvalidConnections">
            <summary>
            The dispose invalid connections.
            </summary>
        </member>
        <member name="P:Norm.PooledConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.M">
            <summary>
            Shorthand to construct modifier operations
            for MongoDB fields.
            </summary>
            <remarks>
            This should remain in the Norm namespace so that it's available 
            automatically when someone is using a MongoCollection.
            </remarks>
        </member>
        <member name="M:Norm.M.Increment(System.Int32)">
            <summary>
            Creates a $inc operation to be applied to a field using the update command.
            </summary>
            <param retval="amountToIncrementBy"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Set``1(``0)">
            <summary>
             Creates a $set operation to be applied to a field using the update command. 
            </summary>
            <param retval="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Push``1(``0)">
            <summary>
            Defines a $push operation against the the property that this is being assigned to.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="pushValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.PushAll``1(``0[])">
            <summary>
            $push es all values into the array.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="pushValues"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.AddToSet``1(``0)">
            <summary>
            defines an $addToSet operation on the property with which this is being assigned.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="addToSetValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Pull``1(``0)">
            <summary>
            defines a $pull operation against the lefthand property.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="pullValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Pop(Norm.Commands.Modifiers.PopType)">
            <summary>
            defines a $pop operation against the lefthand property.
            </summary>
            <param retval="popType"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.PullAll``1(``0[])">
            <summary>
            defines a $pullAll on the lefthand property.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="pullValues"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DbBatch">
            <summary>
            批处理
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbBatch.Execute(System.Collections.Generic.IList{System.Exception}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbBatch.Execute(System.Collections.Generic.IList{MySoft.Data.DataException}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Execute(System.Collections.Generic.IList{MySoft.Data.DataException}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Execute(System.Collections.Generic.IList{System.Exception}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.AddCommand(System.Data.Common.DbCommand)">
            <summary>
            添加命令到队列中
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:MySoft.Data.DbBatch.Insert``1(MySoft.Data.Table,System.Collections.Generic.List{MySoft.Data.FieldValue},System.Object@)">
            <summary>
            插入值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvlist"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Update``1(MySoft.Data.Table,System.Collections.Generic.List{MySoft.Data.FieldValue},MySoft.Data.WhereClip)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvlist"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Exists``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            判断记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            判断记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:MySoft.Data.JoinType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.LeftJoin">
            <summary>
            左链接
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.RightJoin">
            <summary>
            右链接
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.InnerJoin">
            <summary>
            内部链接
            </summary>
        </member>
        <member name="T:Norm.Responses.DroppedCollectionResponse">
            <summary>
            The dropped collection response.
            </summary>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.drop">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.NIndexesWas">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.Msg">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.Ns">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.MongoIndex">
            <summary>
            Describes an index to insert into the db.
            </summary>
            <typeparam retval="T">Collection type for indexing</typeparam>
        </member>
        <member name="T:Norm.Protocol.IUpdateWithoutId">
            <summary>
            Classes implementing this interface can be inserted as a
            document without requiring an _id property.
            </summary>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.ISystemQuery">
            <summary>
            A marker interface that all protocol query messages should implement, used for infrastructure.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex.Key">
            <summary>
            The fieldSelectionExpando.
            </summary>
            <value>The Key property gets/sets the Key data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex.Namespace">
            <summary>
            The namespace the index resides within.
            </summary>
            <value>The Namespace property gets/sets the Namespace data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex.Unique">
            <summary>
            Whether or not the index is unique.
            </summary>
            <value>The Unique property gets/sets the Unique data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex.Name">
            <summary>
            The retval of the index.
            </summary>
            <value>The Name property gets/sets the Name data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest">
            <summary>
            A command to request the databases in a mongoDB instance.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest.ListDatabases">
            <summary>
            Whether or not to list the databases.
            </summary>
            <value>The ListDatabases property gets the ListDatabases data member.</value>
        </member>
        <member name="T:Norm.QueuedConnectionProvider">
            <summary>
            The queued connection provider.
            </summary>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.QueuedConnectionProvider"/> class.
            </summary>
            <param retval="builder">
            The builder.
            </param>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.Open(System.String)">
            <summary>
            Opens a connection.
            </summary>
            <param retval="options">
            Connection options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes a connection.
            </summary>
            <param retval="connection">
            The connection.
            </param>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.PreQueueConnections(System.Int32)">
            <summary>
            Adds connections to the pool on startup so subsequent calls
            don't have the latency of creating a TCP connection.  
            </summary>
            <param retval="poolSize">
            Size of the pool.
            </param>
        </member>
        <member name="P:Norm.QueuedConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationTypeMap">
            <summary>
            The mongo configuration type map.
            </summary>
        </member>
        <member name="F:Norm.Configuration.MongoConfigurationTypeMap._fieldMap">
            <summary>
            The _field map.
            </summary>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.FieldMap">
            <summary>
            Gets the field map.
            </summary>
            <value>The field map.</value>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.CollectionName">
            <summary>
            Gets or sets the retval of the collection.
            </summary>
            <value>The retval of the collection.</value>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="T:Norm.Commands.Modifiers.SetOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.SetOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Collections.IMongoCollection`1">
            <summary>
            Generic collection interface
            </summary>
            <typeparam retval="T">The type of collection</typeparam>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.FindOne``1(``0)">
            <summary>
            Finds one document.
            </summary>
            <typeparam retval="U">Type to find</typeparam>
            <param retval="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.GetChildCollection``1(System.String)">
            <summary>
            Gets a nested collection with the type specified and the retval specified.
            </summary>
            <typeparam retval="U"></typeparam>
            <param retval="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Update``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            Updates the specified document.
            </summary>
            <typeparam retval="X">Document to match</typeparam>
            <typeparam retval="U">Document to update</typeparam>
            <param retval="matchDocument">The match document.</param>
            <param retval="valueDocument">The value document.</param>
            <param retval="updateMultiple">if set to <c>true</c> update all matching documents.</param>
            <param retval="upsert">if set to <c>true</c> upsert.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Delete``1(``0)">
            <summary>
            Delete the documents that mact the specified template.
            </summary>
            <typeparam retval="U">a document that has properties
            that match what you want to delete.</typeparam>
            <param retval="template">The template.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Delete(`0)">
            <summary>
            Delete the entity
            </summary>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``1(System.String,System.String)">
            <summary>
            Execute the mapreduce on this collection.
            </summary>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``2(``0,System.String,System.String)">
            <summary>
            Execute the mapreduce with a limiting query on this collection.
            </summary>
            <param retval="template"></param>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``2(``0,System.String,System.String,System.String)">
            <summary>
            Execute the mapreduce with a limiting query and finalize on this collection.
            </summary>
            <param retval="template"></param>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <param retval="finalize"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``1(Norm.MapReduceOptions{`0})">
            <summary>
            Execute the mapreduce with the supplied options on this collection.
            </summary>
            <param retval="options"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.FindAndModify``3(``0,``1,``2)">
            <summary>
            This command can be used to atomically modify a document (at most one) and return it.
            </summary>
            <typeparam name="U"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="query">The document template used to find the document to find and modify</param>
            <param name="update">A modifier object</param>
            <param name="sort">If multiple docs match, choose the first one in the specified sort order as the object to manipulate</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find``2(``0,``1,System.Int32,System.Int32,System.String)">
            <summary>
            Locates documents that match the template, in the order specified.
            </summary>
            <remarks>
            remember that "orderby" is the mongo notation where the following would sort by Name ascending,
            then by Date descending
            
            new {Name=1, Date-1}
            </remarks>
            <typeparam retval="U"></typeparam>
            <typeparam retval="S"></typeparam>
            <param retval="template">Passing null for this means it will be ignored.</param>
            <param retval="orderBy">Passing null for this means it will be ignored.</param>
            <param retval="limit">The maximum number of documents to return.</param>
            <param retval="skip">The number to skip before returning any.</param>
            <param retval="fullyQualifiedName">The collection from which to pull the documents.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.AsQueryable">
            <summary>
            This is the LINQ Hook, call me and you'll be querying MongoDB via LINQ. w00t!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts documents
            </summary>
            <param retval="documentsToInsert">
            The documents to insert.
            </param>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Explain``1(``0)">
            <summary>
            Generates a query explain plan.
            </summary>
            <typeparam retval="U">The type of the template document (probably an anonymous type..</typeparam>
            <param retval="template">The template of the query to explain.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.CreateIndex(Norm.BSON.Expando,System.String,System.Boolean)">
            <summary>
            Asynchronously creates an index on this collection.
            It is highly recommended that you use the overload of this method that accepts an expression unless you need the granularity that this method provides.
            </summary>
            <param retval="fieldSelectionExpando">The document properties that participate in this index. Each property of "fieldSelectionExpando" should be 
            set to either "IndexOption.Ascending" or "IndexOption.Descending", the properties can be deep aliases, like "Suppiler.Name",
            but remember that this will make no effort to check that what you put in for values match the MongoConfiguration.</param>
            <param retval="indexName">The retval of the index as it should appear in the special "system.indexes" child collection.</param>
            <param retval="isUnique">True if MongoDB can expect that each document will have a unique combination for this fieldSelectionExpando. 
            MongoDB will potentially optimize the index based on this being true.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.DeleteIndex(System.String,System.Int32@)">
            <summary>
            Deletes the specified index for the collection.
            </summary>
            <param retval="indexName"></param>
            <param retval="numberDeleted"></param>
            <returns>The delete index.</returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Save(`0)">
            <summary>
            Attempts to save or update an instance
            </summary>
            <param retval="entity">The entity.</param>
            <remarks>
            Only works when the Id property is of type ObjectId
            </remarks>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.GetCollectionStatistics">
            <summary>
            The get collection statistics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Count``1(``0)">
            <summary>
            A count using the specified filter.
            </summary>
            <typeparam retval="U">Document type</typeparam>
            <param retval="query">The query.</param>
            <returns>The count.</returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Distinct``1(System.String)">
            <summary>
            Gets the distinct values for the specified fieldSelectionExpando.
            </summary>
            <typeparam retval="U">You better know that every value that could come back
            is of this type, or BAD THINGS will happen.</typeparam>
            <param retval="keyName">Name of the fieldSelectionExpando.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.GenerateId">
            <summary>
            Generates a new identity value using the HiLo algorithm
            </summary>
            <returns>New identity value</returns>
        </member>
        <member name="P:Norm.Collections.IMongoCollection`1.Updateable">
            <summary>
            Gets a value indicating whether this <see cref="T:Norm.Collections.IMongoCollection`1"/> is updateable.
            </summary>
            <value><c>true</c> if updateable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Norm.Collections.IMongoCollection`1.FullyQualifiedName">
            <summary>
            The retval of this collection, including the database prefix.
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbProvider.AddParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="plist"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.AddParameter(System.Data.Common.DbCommand,MySoft.Data.SQLParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="plist"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.CreateConnection">
            <summary>
            创建DbConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddParameter(System.Data.Common.DbCommand,MySoft.Data.SQLParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            添加输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddReturnValueParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加返回参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddReturnValueParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            添加返回参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.PrepareCommand(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateConnection">
            <summary>
            创建DbConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.FormatCommandText(System.String)">
            <summary>
            返回最终排序的SQL
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateSqlCommand(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            创建SQL命令
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateProcCommand(System.String)">
            <summary>
            创建存储过程命令
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.BeginExecuteCommand(System.Data.Common.DbCommand)">
            <summary>
            Writes the log.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:MySoft.Data.DbProvider.EndExecuteCommand(System.Data.Common.DbCommand,System.Object,System.Exception,System.Int64)">
            <summary>
            结束时执行的操作
            </summary>
            <param name="command"></param>
            <param name="result"></param>
            <param name="ex"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.GetAutoIncrement(System.String)">
            <summary>
            获取IdentityName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand参数
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="itemCount"></param>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateSQLParameter(System.Object)">
            <summary>
            创建OrmParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CheckValue(System.Object)">
            <summary>
            检测是否为非法值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.DbProvider.ThrowError">
            <summary>
            是否抛出异常
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.Logger">
            <summary>
            日志依赖
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.Cache">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AccessProvider">
            <summary>
            是否为Access驱动
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AllowAutoIncrement">
            <summary>
            是否使用自增列
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.ViewEntity">
            <summary>
            只用于显示的实体
            </summary>
        </member>
        <member name="T:MySoft.Data.Entity">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="T:MySoft.Data.EntityBase">
            <summary>
            Entity基类
            </summary>
        </member>
        <member name="T:MySoft.Data.IEntityBase">
            <summary>
            实体基类接口
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.As``1">
            <summary>
            转换成另一对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.ToRowReader">
            <summary>
            返回一个行阅读对象
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.ToDictionary">
            <summary>
            返回字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetObjectState">
            <summary>
            获取对象状态
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetValue(System.String)">
            <summary>
            使用propertyName获取值信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.SetValue(System.String,System.Object)">
            <summary>
            使用propertyName获设置信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetValue(MySoft.Data.Field)">
            <summary>
            使用field获取值信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.SetValue(MySoft.Data.Field,System.Object)">
            <summary>
            使用field获设置信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetField(System.String)">
            <summary>
            通过属性获取字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.IEntityInfo">
            <summary>
            实体相关信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.Table">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.Fields">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.FieldValues">
            <summary>
            字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.UpdateFields">
            <summary>
            更新字段
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.UpdateFieldValues">
            <summary>
            更新字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.IsUpdate">
            <summary>
            是否修改
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.IsReadOnly">
            <summary>
            是否只读 (只读时为视图或自定义实例)
            </summary>
        </member>
        <member name="T:MySoft.Data.IValidator">
            <summary>
            实体验证接口
            </summary>
        </member>
        <member name="M:MySoft.Data.IValidator.Validation">
            <summary>
            根据实体状态来验证实体的有效性，返回一组错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.As``1">
            <summary>
            转换成另一对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#ToRowReader">
            <summary>
            返回一个行阅读对象
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#ToDictionary">
            <summary>
            返回字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetValue(System.String)">
            <summary>
            使用propertyName获取值信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#SetValue(System.String,System.Object)">
            <summary>
            使用propertyName获设置信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetValue(MySoft.Data.Field)">
            <summary>
            使用field获取值信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#SetValue(MySoft.Data.Field,System.Object)">
            <summary>
            使用field获设置信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetField(System.String)">
            <summary>
            通过属性获取字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetObjectState">
            <summary>
            获取对象状态
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetSequence">
            <summary>
            返回标识列的名称（如Oracle中Sequence.nextval）
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetIdentityField">
            <summary>
            获取标识列
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetPrimaryKeyFields">
            <summary>
            获取主键列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetFields">
            <summary>
            获取字段列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetValues">
            <summary>
            获取属性值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetReadOnly">
            <summary>
            获取只读属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetTable">
            <summary>
            获取表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.SetValues(MySoft.Data.IRowReader)">
            <summary>
            设置属性值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.EntityBase.SetExtValues(MySoft.Data.IRowReader)">
            <summary>
            设置扩展属性值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.EntityBase.SetDbValues(MySoft.Data.IRowReader)">
            <summary>
            设置所有的值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetFieldValues">
            <summary>
            获取字段及值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.Validation">
            <summary>
            验证实体的有效性
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.EntityBase.SequenceName">
            <summary>
            获取系列的名称
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.PagingField">
            <summary>
            获取排序或分页字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.EntityBase.IdentityField">
            <summary>
            获取标识列
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#Table">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#Fields">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#FieldValues">
            <summary>
            字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#UpdateFields">
            <summary>
            更新字段
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#UpdateFieldValues">
            <summary>
            更新字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#IsUpdate">
            <summary>
            是否修改
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.Attach(MySoft.Data.Field[])">
            <summary>
            置为修改状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.AttachSet(MySoft.Data.Field[])">
            <summary>
            置为修改状态并设置字段
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.AttachAll(MySoft.Data.Field[])">
            <summary>
            置为修改状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.Detach(MySoft.Data.Field[])">
            <summary>
            置为插入状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.DetachSet(MySoft.Data.Field[])">
            <summary>
            置为插入状态并设置字段
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.DetachAll(MySoft.Data.Field[])">
            <summary>
            置为插入状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.Attach(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并移除指定的列
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.Detach(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并移除指定的列
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AttachAll(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并移除指定的列(所有字段)
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.DetachAll(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并移除指定的列(所有字段)
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AttachSet(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并更新指定的列
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.DetachSet(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并插入指定的列
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.OnPropertyValueChange(MySoft.Data.Field,System.Object,System.Object)">
            <summary>
            增加单个属性到修改列表
            </summary>
            <param name="field"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AddFieldsToUpdate(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            添加字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AddFieldsToUpdate(MySoft.Data.Field)">
            <summary>
            添加字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.RemoveFieldsToUpdate(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            移除字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.RemoveFieldsToInsert(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            移除字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.GetFields">
            <summary>
            重载GetFields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.GetValues">
            <summary>
            重载GetValues
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.SetValues(MySoft.Data.IRowReader)">
            <summary>
            重载SetValues
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:MySoft.Data.Mapping.TableSetting">
            <summary>
            表映射设置
            </summary>
        </member>
        <member name="M:MySoft.Data.Mapping.TableSetting.#ctor">
            <summary>
            初始化TableSetting
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Prefix">
            <summary>
            表前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Suffix">
            <summary>
            表后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Mappings">
            <summary>
            表映射
            </summary>
        </member>
        <member name="T:MySoft.Data.Mapping.TableMapping">
            <summary>
            表映射节点
            </summary>
        </member>
        <member name="M:MySoft.Data.Mapping.TableMapping.#ctor">
            <summary>
            初始化TableMapping
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.ClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.UsePrefix">
            <summary>
            使用前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.UseSuffix">
            <summary>
            使用后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.MappingName">
            <summary>
            映射的表名
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.Mappings">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="T:MySoft.Data.Mapping.FieldMapping">
            <summary>
            字段映射节点
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.FieldMapping.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.FieldMapping.MappingName">
            <summary>
            映射的字段名
            </summary>
        </member>
        <member name="T:MySoft.Data.FromSection`1">
            <summary>
            Form处理节
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToSingle``1">
            <summary>
            返回一个实体
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery``1(System.String)">
            <summary>
            生成一个带别名的子查询
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GroupBy(MySoft.Data.Field[])">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.OrderBy(MySoft.Data.Field[],System.Boolean)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="fields"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Select(MySoft.Data.Field[])">
            <summary>
            选择输出的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Select(MySoft.Data.IFieldFilter)">
            <summary>
            选择被排除以外的列（用于列多时排除某几列的情况）
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Where(MySoft.Data.WhereClip)">
            <summary>
            注入当前查询的条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Union(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.UnionAll(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Having(MySoft.Data.WhereClip)">
            <summary>
            进行Having操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetTop(System.Int32)">
            <summary>
            选择前n条
            </summary>
            <param name="topSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Distinct">
            <summary>
            进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetPage(System.Int32)">
            <summary>
            返回一个分页处理的Page节
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToSingle">
            <summary>
            返回一个实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult``1(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult``1">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToReader(System.Int32,System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToReader">
            <summary>
            返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList``1">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTable(System.Int32,System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTable">
            <summary>
            返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToDataSet(System.Int32,System.Int32)">
            <summary>
            返回一个DataSet
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToDataSet">
            <summary>
            返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToScalar``1">
            <summary>
            返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToScalar">
            <summary>
            返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Count">
            <summary>
            返回当前查询记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListPage``1(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListPage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回指定数据源的分页信息
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToDataSetPage(System.Int32,System.Int32)">
            <summary>
            返回指定数据源的分页信息
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.FromSection`1.Query">
            <summary>
            当前查询对象
            </summary>
        </member>
        <member name="P:MySoft.Data.FromSection`1.TableEntities">
            <summary>
            当前实例列表
            </summary>
        </member>
        <member name="T:Norm.Responses.LastErrorResponse">
            <summary>
            Indicates what the last error the MongoDB server encountered was.
            </summary>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.NumberOfErrors">
            <summary>
            Gets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.Code">
            <summary>
            Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="T:Norm.Linq.MongoQueryTranslator">
            <summary>
            The mongo query translator.
            </summary>
        </member>
        <member name="T:Norm.Linq.ExpressionVisitor">
            <summary>
            The expression visitor.
            </summary>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an expression.
            </summary>
            <param retval="exp">The expression.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a binding.
            </summary>
            <param retval="binding">
            The binding.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an element initializer.
            </summary>
            <param retval="initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a unary expression.
            </summary>
            <param retval="u">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression.
            </summary>
            <param retval="b">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a "type is" expression
            </summary>
            <param retval="b">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant.
            </summary>
            <param retval="c">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a conditional.
            </summary>
            <param retval="c">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a parameter.
            </summary>
            <param retval="p">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            The visit member access.
            </summary>
            <param retval="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits amethod call.
            </summary>
            <param retval="m">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an expression list.
            </summary>
            <param retval="original">
            The original expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a member assignment.
            </summary>
            <param retval="assignment">
            The assignment.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a member member binding.
            </summary>
            <param retval="binding">
            The binding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a member list binding.
            </summary>
            <param retval="binding">
            The binding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a binding list.
            </summary>
            <param retval="original">
            The original.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an element initializer list.
            </summary>
            <param retval="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a lambda.
            </summary>
            <param retval="lambda">
            The lambda.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a new expression.
            </summary>
            <param retval="nex">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a member init.
            </summary>
            <param retval="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a list init.
            </summary>
            <param retval="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a new array.
            </summary>
            <param retval="na">
            The na.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an invocation.
            </summary>
            <param retval="iv">The invocation.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates LINQ to MongoDB.
            </summary>
            <param retval="exp">The expression.</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.Translate(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Translates LINQ to MongoDB.
            </summary>
            <param retval="exp">The expression.</param>
            <param retval="useScopedQualifier">Whether to use the "this" qualifier</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits member access.
            </summary>
            <param retval="m">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a Unary call.
            </summary>
            <param retval="u">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.GetParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            The get parameter expression.
            </summary>
            <param retval="expression">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression.
            </summary>
            <param retval="b">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant.
            </summary>
            <param retval="c">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a method call.
            </summary>
            <param retval="m">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.IsCallableMethod(System.String)">
            <summary>
            Determines if it's a callable method.
            </summary>
            <param retval="methodName">The method retval.</param>
            <returns>The is callable method.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.SetFlyValue(System.Object)">
            <summary>
            The set flyweight value.
            </summary>
            <param retval="value">The value.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleSkip(System.Linq.Expressions.Expression)">
            <summary>
            Handles skip.
            </summary>
            <param retval="exp">The expression.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleTake(System.Linq.Expressions.Expression)">
            <summary>
            Handles take.
            </summary>
            <param retval="exp">The expression.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            The handle method call.
            </summary>
            <param retval="m">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.IsComplex">
            <summary>
            Gets a value indicating whether IsComplex.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.ConditionalCount">
            <summary>
            Gets conditional count.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.Skip">
            <summary>
            How many to skip.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.Take">
            <summary>
            How many to take (Int32.MaxValue) by default.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.WhereExpression">
            <summary>
            Gets where expression.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.UseScopedQualifier">
            <summary>
            Whether to use the "this" qualifier
            </summary>
        </member>
        <member name="T:Norm.Linq.IMongoQueryResults">
            <summary>
            MongoQueryResults
            </summary>
        </member>
        <member name="P:Norm.Linq.IMongoQueryResults.TranslationResults">
            <summary>
            Returns the translation results from a linq query
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.WhereQualifier">
            <summary>
            Provides a hook to create a $where qualifier for a query.
            </summary>
        </member>
        <member name="T:Norm.BSON.Expando">
            <summary>
            Provides a completely blank slate for which to query objects out of the DB.
            Arbitrary properties for all!
            </summary>
            <remarks>
            This is a glorified dictionary, but so be it.
            </remarks>
        </member>
        <member name="M:Norm.BSON.Expando.AllProperties">
            <summary>
            All the properties of this flyweight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.Expando.ReverseKitchen">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.Expando.Get``1(System.String)">
            <summary>
            Pulls the property of the specified type "T". You better know it's in there or you're going to get an exception.. just sayin'
            </summary>
            <typeparam retval="T">Type of property</typeparam>
            <param retval="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.Expando.Contains(System.String)">
            <summary>
            Whether the property retval is in the kitchen sink.
            </summary>
            <param retval="propertyName">The property retval.</param>
            <returns>The contains.</returns>
        </member>
        <member name="M:Norm.BSON.Expando.Delete(System.String)">
            <summary>
            Deletes a property.
            </summary>
            <param retval="propertyName">The property retval.</param>
        </member>
        <member name="M:Norm.BSON.Expando.Set``1(System.String,``0)">
            <summary>
            Sets the value on the property retval you specify.
            remember that this will destroy any other property of the same retval
            (culture and case-insensitive matching)
            </summary>
            <typeparam retval="T">Type to set</typeparam>
            <param retval="propertyName">Name of the property.</param>
            <param retval="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.Expando.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to read the value out of the flyweight, if it's not here,
            value is set to default(T) and the method returns false.
            </summary>
            <typeparam retval="T">Type to try to get</typeparam>
            <param retval="propertyName">Name of the property.</param>
            <param retval="value">The value.</param>
            <returns>The try get.</returns>
        </member>
        <member name="M:Norm.BSON.Expando.Merge(Norm.BSON.Expando)">
            <summary>
            Merges one Expando with the current Expando
            </summary>
            <param retval="expando">The Expando to be merged</param>
            <returns>The current expando instance</returns>
        </member>
        <member name="P:Norm.BSON.Expando.Item(System.String)">
            <summary>
            Get or set a property of this flyweight.
            </summary>
            <param retval="propertyName">property retval</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Commands.Qualifiers.WhereQualifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.WhereQualifier"/> class.
            </summary>
            <param retval="inExpression">The in expression.</param>
        </member>
        <member name="T:Norm.Collections.CollectionHiLoIdGenerator">
            <summary>
            Generates an identity using the HiLo algorithm per collection
            </summary>
        </member>
        <member name="M:Norm.Collections.CollectionHiLoIdGenerator.GenerateId(Norm.IMongoDatabase,System.String)">
            <summary>
            Generates the identity value
            </summary>
            <param name="db">MongoDatabase instance</param>
            <param name="collectionName">Collection Name</param>
            <returns>Generated identity</returns>
        </member>
        <member name="T:Norm.MongoDiscriminatedAttribute">
            <summary>
            Flags a type as having a discriminator.  Apply to a base type to enable multiple-inheritance.
            </summary>
        </member>
        <member name="M:Norm.MongoDiscriminatedAttribute.GetDiscriminatingTypeFor(System.Type)">
            <summary>
            Finds the sub-type or interface from the given type that declares itself as a discriminating base class
            </summary>
            <param retval="type"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Design.MappingAttribute">
            <summary>
            字段映射的名称
            </summary>
        </member>
        <member name="T:MySoft.Data.DbProviderType">
            <summary>
            驱动类型
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.Access">
            <summary>
            Access数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SqlServer">
            <summary>
            SqlServer2000数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SqlServer9">
            <summary>
            SqlServer2005数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SQLite">
            <summary>
            SQLite数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.FireBird">
            <summary>
            FireBird数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.PostgreSQL">
            <summary>
            PostgreSQL数据库
            </summary>
        </member>
        <member name="T:MySoft.Data.DbProviderFactory">
            <summary>
            The db provider factory.
            </summary>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(MySoft.Data.DbProviderType,System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connectionString">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String,System.String,System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="connectionString">The conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connectName">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String,MySoft.Data.DbProviderType)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connStrName">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="P:MySoft.Data.DbProviderFactory.Default">
            <summary>
            Gets the default db provider.
            </summary>
            <value>The default.</value>
        </member>
        <member name="T:MySoft.Data.QueryCreator`1">
            <summary>
            查询创建器
            </summary>
        </member>
        <member name="T:MySoft.Data.QueryCreator">
            <summary>
            查询创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator(System.String)">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator(System.String,System.String)">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.#ctor(System.String,System.String)">
            <summary>
            实例化QueryCreator
            </summary>
            <param name="tableName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化QueryCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(System.String,System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="aliasName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <param name="table"></param>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.JoinType,System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.JoinType,System.String,System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="aliasName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.JoinType,MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <param name="table"></param>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(MySoft.Data.OrderByClip)">
            <summary>
            添加一个排序
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(System.String)">
            <summary>
            添加一个排序
            </summary>
            <param name="orderby"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(MySoft.Data.Field,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="field"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(System.String,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="fieldName"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(MySoft.Data.Field)">
            <summary>
            添加一个字段
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(System.String)">
            <summary>
            添加一个字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(System.String,System.String)">
            <summary>
            添加一个字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.RemoveField(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.RemoveField(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.QueryCreator.OrderBy">
            <summary>
            返回排序
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Fields">
            <summary>
            返回字段列表
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.IsRelation">
            <summary>
            是否关联查询
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Relations">
            <summary>
            获取关联信息
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator`1.NewCreator">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator`1.Join``1(MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator`1.Join``1(MySoft.Data.JoinType,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="joinType"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.TableJoin">
            <summary>
            TableJoin
            </summary>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToListResult(System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToListResult``1(System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToReader(System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToTable(System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToDataSet(System.Int32)">
            <summary>
            返回一个DataSet
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToList(System.Int32)">
            <summary>
            返回一个IArrayList
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.PageSection`1.PageCount">
            <summary>
            返回页数
            </summary>
        </member>
        <member name="P:MySoft.Data.PageSection`1.RowCount">
            <summary>
            返回记录数
            </summary>
        </member>
        <member name="T:Norm.Responses.DatabaseInfo">
            <summary>
            The database info.
            </summary>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.Name">
            <summary>TODO::Description.</summary>
            <value>The retval.</value>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.SizeOnDisk">
            <summary>TODO::Description.</summary>
            <value>The size on disk.</value>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.Empty">
            <summary>TODO::Description.</summary>
            <value>If the database is empty.</value>
        </member>
        <member name="T:Norm.MapReduceResult`2">
            <summary>
            A generic class for handling MapReduce resonses. Not required to use but is helpful if returning more than one value.
            MapReduce returns a collection of objects that are fieldSelectionExpando - value pairs. The value can be a single value, or more likely a document response.
            If you are getting back a single int you could declare MapReduceResponseGeneric&lt;int%gt;, if its a more complex type it could be MapReduceResponseGeneric&lt;myclass&gt;
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2._id">
            <summary>
            The Id returned from Mongo
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2.Key">
            <summary>
            A friendly mapping to the _id property
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2.Value">
            <summary>
            The generic value returned from Mongo.
            </summary>
        </member>
        <member name="T:Norm.Linq.MapReduceResult`1">
            <summary>
            The map reduce result.
            </summary>
            <typeparam retval="T">Type to map and reduce</typeparam>
        </member>
        <member name="P:Norm.Linq.MapReduceResult`1.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Norm.Linq.MapReduceResult`1.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="T:Norm.Linq.LinqTypeHelper">
            <summary>
            Type related helper methods
            </summary>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.FindIEnumerable(System.Type)">
            <summary>
            Find IEnumerable.
            </summary>
            <param retval="seqType">The seq type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetSequenceType(System.Type)">
            <summary>
            The get sequence type.
            </summary>
            <param retval="elementType">The element type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetElementType(System.Type)">
            <summary>
            The get element type.
            </summary>
            <param retval="seqType">The seq type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.IsNullableType(System.Type)">
            <summary>
            The is nullable type.
            </summary>
            <param retval="type">The type.</param>
            <returns>nullable type.</returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.IsNullAssignable(System.Type)">
            <summary>
            The is null assignable.
            </summary>
            <param retval="type">The type.</param>
            <returns>null assignable.</returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetNonNullableType(System.Type)">
            <summary>
            The get non nullable type.
            </summary>
            <param retval="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            The get member type.
            </summary>
            <param retval="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            <summary>
            An exception that can be thrown by MongoCollection when the document is more than the MongoDB limit of 4MB.
            </summary>
            <typeparam retval="T">
            The type of the document that was serialized.
            </typeparam>
        </member>
        <member name="M:Norm.BSON.DocumentExceedsSizeLimitsException`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1"/> class.
            </summary>
            <param retval="document">
            The document.
            </param>
            <param retval="size">
            The size.
            </param>
        </member>
        <member name="P:Norm.BSON.DocumentExceedsSizeLimitsException`1.DocumentSize">
            <summary>
            The size in bytes of the document after serialization.
            </summary>
        </member>
        <member name="P:Norm.BSON.DocumentExceedsSizeLimitsException`1.Document">
            <summary>
            The document that was serialized.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.DbReference`1">
            <summary>
            A DB-pointer to another document.
            </summary>
            <typeparam retval="T">The type of document being referenced.</typeparam>
        </member>
        <member name="T:Norm.BSON.DbTypes.DbReference`2">
            <summary>
            A DB-pointer to another document.
            </summary>
            <typeparam retval="T">The type of document being referenced.</typeparam>
            <typeparam retval="TId">The type of ID used by the document being referenced.</typeparam>
        </member>
        <member name="T:Norm.ObjectId">
            <summary>
            Represents a Mongo document's ObjectId
            </summary>
        </member>
        <member name="M:Norm.ObjectId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
        </member>
        <member name="M:Norm.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.ObjectId.NewObjectId">
            <summary>
            Generates a new unique oid for use with MongoDB Objects.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.ObjectId.TryParse(System.String,Norm.ObjectId@)">
            <summary>
            Tries the parse.
            </summary>
            <param retval="value">
            The value.
            </param>
            <param retval="id">
            The id.
            </param>
            <returns>
            The try parse.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.op_Equality(Norm.ObjectId,Norm.ObjectId)">
            <summary>
            Implements the operator ==.
            </summary>
            <param retval="a">A.</param>
            <param retval="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Norm.ObjectId.op_Inequality(Norm.ObjectId,Norm.ObjectId)">
            <summary>
            Implements the operator !=.
            </summary>
            <param retval="a">A.</param>
            <param retval="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Norm.ObjectId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Norm.ObjectId.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param retval="o">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.Equals(Norm.ObjectId)">
            <summary>
            Equalses the specified other.
            </summary>
            <param retval="other">
            The other.
            </param>
            <returns>
            The equals.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.DecodeHex(System.String)">
            <summary>
            Decodes a HexString to bytes.
            </summary>
            <param retval="val">
            The hex encoding string that should be converted to bytes.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.ObjectId.op_Implicit(Norm.ObjectId)~System.String">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ObjectId.op_Implicit(System.String)~Norm.ObjectId">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.ObjectId.Empty">
            <summary>
            Provides an empty ObjectId (all zeros).
            </summary>
        </member>
        <member name="P:Norm.ObjectId.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.DbReference`2"/> class.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#ctor(`1)">
            <summary>
            Constructor for easier instantiation of db references.
            </summary>
            <param retval="id">The id of the referenced document.</param>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.Fetch(System.Func{Norm.Collections.IMongoCollection{`0}})">
            <summary>
            Fetches the instance of type T in the collection referenced by the DBRef $id
            </summary>
            <param retval="referenceCollection">
            The reference collection.
            </param>
            <returns>
            Referenced type T
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.Fetch(System.Func{Norm.IMongo})">
            <summary>
            Fetches the instance of type T in the collection referenced by the DBRef $id
            </summary>
            <param retval="server">
            A function that returns an instance of the Mongo server connection.
            </param>
            <returns>
            Referenced type T
            </returns>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.Collection">
            <summary>
            The collection in while the referenced value lives.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.Id">
            <summary>
            The ID of the referenced object.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.DatabaseName">
            <summary>
            The retval of the db where the reference is stored.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.DbReference`2"/> class.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#ctor(Norm.ObjectId)">
            <summary>
            Constructor for easier instantiation of db references.
            </summary>
            <param retval="id">The id of the referenced document.</param>
        </member>
        <member name="T:Norm.BSON.BsonHelper">
            <summary>
            The bson helper.
            </summary>
        </member>
        <member name="T:Norm.Attributes.MongoIgnoreIfNullAttribute">
            <summary>
            Ignores properties if the value is null.
            </summary>
        </member>
        <member name="T:MySoft.Data.ExcludeField">
            <summary>
            用于被排除的Field
            </summary>
        </member>
        <member name="T:MySoft.Data.IFieldFilter">
            <summary>
            字段筛选
            </summary>
        </member>
        <member name="M:MySoft.Data.IFieldFilter.GetFields(MySoft.Data.Field[])">
            <summary>
            获取字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ExcludeField.#ctor(MySoft.Data.Field[])">
            <summary>
            实例化被排除的Field
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.ExcludeField.GetFields(MySoft.Data.Field[])">
            <summary>
            获取字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.TableEntity.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:MySoft.Data.TableEntity.Entity">
            <summary>
            实体对象
            </summary>
        </member>
        <member name="T:MySoft.Data.WhereClipBuilder">
            <summary>
            WhereClip构建类
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClipBuilder.#ctor">
            <summary>
            实例化WhereClipBuilder
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClipBuilder.#ctor(MySoft.Data.WhereClip[])">
            <summary>
            实例化WhereClipBuilder
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.WhereClipBuilder.And(MySoft.Data.WhereClip)">
            <summary>
            增加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.WhereClipBuilder.Or(MySoft.Data.WhereClip)">
            <summary>
            增加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="P:MySoft.Data.WhereClipBuilder.WhereClip">
            <summary>
            返回条件
            </summary>
        </member>
        <member name="T:MySoft.Data.WhereClipBuilder.WhereClipItem">
            <summary>
            条件组件类
            </summary>
        </member>
        <member name="P:MySoft.Data.WhereClipBuilder.WhereClipItem.WhereClip">
            <summary>
            条件属性
            </summary>
        </member>
        <member name="P:MySoft.Data.WhereClipBuilder.WhereClipItem.IsAnd">
            <summary>
            是否And操作
            </summary>
        </member>
        <member name="T:MySoft.Data.DbTrans">
            <summary>
            事务处理类
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.#ctor(MySoft.Data.DbProvider,System.Data.Common.DbTransaction)">
            <summary>
            以DbTransaction方式实例化一个事务
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="M:MySoft.Data.DbTrans.#ctor(MySoft.Data.DbProvider,System.Data.Common.DbConnection)">
            <summary>
            以BbConnection方式实例化一个事务
            </summary>
            <param name="dbProvider"></param>
            <param name="dbConnection"></param>
        </member>
        <member name="M:MySoft.Data.DbTrans.BeginBatch">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.BeginBatch(System.Int32)">
            <summary>
            返回一个Batch
            </summary>
            <param name="batchSize">Batch大小</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            删除指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Dispose">
            <summary>
            Dispose事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Close">
            <summary>
            关闭事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Count``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Count``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(MySoft.Data.Table)">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(System.String)">
            <summary>
            返回一个From节，并可指定其别名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(MySoft.Data.TableRelation{``0})">
            <summary>
            返回一个Query节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromSql(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromProc(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromSql(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromProc(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Execute(MySoft.Data.InsertCreator)">
            <summary>
            插入数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Execute``1(MySoft.Data.InsertCreator,``0@)">
            <summary>
             插入数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="creator"></param>
            <param name="identityValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Execute(MySoft.Data.DeleteCreator)">
            <summary>
            按条件删除指定记录
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Execute(MySoft.Data.UpdateCreator)">
            <summary>
            更新数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From(MySoft.Data.QueryCreator)">
            <summary>
            返回一个Query节
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Table,MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Table,MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(``0,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Table,``0,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SqlSection">
            <summary>
            sql语句操作实现类
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(MySoft.Data.SQLParameter[])">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddInputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入参数到当前Sql命令
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入参数到当前Sql命令
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.Execute">
            <summary>
            执行当前Sql命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToSingle``1">
            <summary>
            执行当前Sql命令并返回一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToList``1">
            <summary>
            执行当前Sql命令并返回一个List列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToListResult``1">
            <summary>
            执行当前Sql并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToReader">
            <summary>
            执行当前Sql命令并返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToTable">
            <summary>
            执行当前Sql命令并返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToDataSet">
            <summary>
            执行当前Sql命令并返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToScalar">
            <summary>
            执行当前Sql命令并返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToScalar``1">
            <summary>
            执行当前
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.GetNonceResponse">
            <summary>
            The get nonce response.
            </summary>
        </member>
        <member name="M:Norm.Responses.GetNonceResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.GetNonceResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.GetNonceResponse.Nonce">
            <summary>
            Gets the nonce.
            </summary>
            <value>The nonce.</value>
        </member>
        <member name="T:Norm.Responses.ForceSyncResponse">
            <summary>
            Indicates the result of a demand that MongoDB flush non-file committed writes to their respective files.
            </summary>
        </member>
        <member name="M:Norm.Responses.ForceSyncResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ForceSyncResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ForceSyncResponse.NumberOfFiles">
            <summary>
            Gets the number of files.
            </summary>
            <value>The number of files.</value>
        </member>
        <member name="T:Norm.Responses.DistinctValuesResponse`1">
            <summary>
            The distinct values response.
            </summary>
            <typeparam retval="T">
            </typeparam>
        </member>
        <member name="P:Norm.Responses.DistinctValuesResponse`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Norm.MapReduceOptions`1">
            <summary>
            Map/reduce options for a given type
            </summary>
            <typeparam retval="T">Type to map and recude</typeparam>
        </member>
        <member name="T:Norm.MapReduceOptions">
            <summary>
            The map reduce options.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions"/> class.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions"/> class.
            </summary>
            <param retval="collectionName">
            The collection retval.
            </param>
        </member>
        <member name="P:Norm.MapReduceOptions.Map">
            <summary>
            Gets or sets Map.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Reduce">
            <summary>
            Gets or sets Reduce.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Query">
            <summary>
            Gets or sets the Query object for MapReduce.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.CollectionName">
            <summary>
            Gets or sets CollectionName.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Permanant">
            <summary>
            Gets or sets a value indicating whether Permanant.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.OutputCollectionName">
            <summary>
            Gets or sets OutputCollectionName.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Limit">
            <summary>
            Gets or sets Limit.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Finalize">
            <summary>
            Gets or sets Finalize.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions`1"/> class.
            </summary>
        </member>
        <member name="T:Norm.Linq.PartialEvaluator">
            <summary>
            Rewrites an expression tree so that locally isolatable sub-expressions are evaluated and converted into ConstantExpression nodes.
            </summary>
        </member>
        <!-- 对于成员“M:Norm.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Norm.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:Norm.Linq.PartialEvaluator.SubtreeEvaluator”忽略有格式错误的 XML 注释 -->
        <member name="T:Norm.Linq.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:Norm.IMongoGrouping`2">
            <summary>
            The i mongo grouping.
            </summary>
            <typeparam retval="K">Key</typeparam>
            <typeparam retval="V">Value</typeparam>
        </member>
        <member name="P:Norm.IMongoGrouping`2.Key">
            <summary>
            Gets or sets the ey.
            </summary>
        </member>
        <member name="P:Norm.IMongoGrouping`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.NotEqualQualifier">
            <summary>
            The not equal qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.NotEqualQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.NotEqualQualifier"/> class.
            </summary>
            <param retval="value">The value.</param>
        </member>
        <member name="P:Norm.Commands.Modifiers.ModifierExpression`1.Expression">
            <summary>
            The modifier expression
            </summary>
        </member>
        <member name="T:Norm.BSON.MagicProperty">
            <summary>
            A class to call Properties dynamically on an instance.
            </summary>
        </member>
        <member name="M:Norm.BSON.MagicProperty.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.MagicProperty"/> class.
            </summary>
            <param retval="property">The property.</param>
            <param retval="declaringType"></param>
        </member>
        <member name="M:Norm.BSON.MagicProperty.GetDefaultValue">
            <summary>
            Return the value specified in the DefaultValue attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.IgnoreProperty(System.Object,System.Object@)">
            <summary>
            Check to see if we need to serialize this property.
            </summary>
            <param retval="document">The instance on which the property should be applied.</param>
            <param retval="value">The value of the property in the provided instance</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateSetterMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter method.
            </summary>
            <param retval="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateGetterMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter method.
            </summary>
            <param retval="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateShouldSerializeMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the should serialize method.
            </summary>
            <param retval="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.SetterMethod``2(System.Reflection.PropertyInfo)">
            <summary>
            Setter method.
            </summary>
            <typeparam retval="TTarget">The type of the target.</typeparam>
            <typeparam retval="TParam">The type of the param.</typeparam>
            <param retval="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.GetterMethod``2(System.Reflection.PropertyInfo)">
            <summary>
            Getter method.
            </summary>
            <typeparam retval="TTarget">The type of the target.</typeparam>
            <typeparam retval="TParam">The type of the param.</typeparam>
            <param retval="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.ShouldSerializeMethod``1(System.Reflection.MethodInfo)">
            <summary>
            ShouldSerialize... method.
            </summary>
            <typeparam retval="TTarget">The type of the target.</typeparam>
            <param retval="method">The method.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.BSON.MagicProperty.DeclaringType">
            <summary>
            The object that declared this property.
            </summary>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Type">
            <summary>
            Gets the property's underlying type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Name">
            <summary>
            Gets the property's retval.
            </summary>
            <value>The retval.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.IgnoreIfNull">
            <summary>
            Gets a value indicating whether to ignore the property if it's null.
            </summary>
            <value><c>true</c> if ignoring; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.HasDefaultValue">
            <summary>
            Returns if this PropertyInfo has DefaultValueAttribute associated
            with it.
            </summary>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Setter">
            <summary>
            Gets or sets the property setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Getter">
            <summary>
            Gets or sets the property getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.ShouldSerialize">
            <summary>
            Gets of sets the property ShouldSerialize
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.DescriptionAttribute">
            <summary>
            字段描述信息
            </summary>
        </member>
        <member name="T:MySoft.Data.QuerySection">
            <summary>
            查询器
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection.SetPagingField(System.String)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.GetPage(System.Int32)">
            <summary>
            获取分页
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToScalar">
            <summary>
            返回首行首列值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToScalar``1">
            <summary>
            返回首行首列值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.Count">
            <summary>
            返回记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.Exists">
            <summary>
            记录是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToSingle``1">
            <summary>
            返回T
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToList``1">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToReader">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTable">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToDataSet">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToList``1(System.Int32)">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToDataSet(System.Int32)">
            <summary>
            返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToListPage``1(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToDataSetPage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.InvalidValue">
            <summary>
            无效的对象
            </summary>
        </member>
        <member name="P:MySoft.Data.InvalidValue.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:MySoft.Data.InvalidValue.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:MySoft.Data.ValidateResult">
            <summary>
            验证返回信息
            </summary>
        </member>
        <member name="F:MySoft.Data.ValidateResult.Default">
            <summary>
            默认的验证器
            </summary>
        </member>
        <member name="M:MySoft.Data.ValidateResult.#ctor">
            <summary>
            实例化ValidateResult
            </summary>
        </member>
        <member name="M:MySoft.Data.ValidateResult.#ctor(System.Collections.Generic.IList{MySoft.Data.InvalidValue})">
            <summary>
            实例化ValidateResult
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:MySoft.Data.ValidateResult.IsSuccess">
            <summary>
            验证是否成功
            </summary>
        </member>
        <member name="P:MySoft.Data.ValidateResult.Values">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="T:MySoft.Data.Oracle.OracleProvider">
            <summary>
            Oracle 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.GetAutoIncrement(System.String)">
            <summary>
            格式化IdentityName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="itemCount"></param>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.AllowAutoIncrement">
            <summary>
            是否使用自增列
            </summary>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:Norm.Responses.AssertInfoResponse">
            <summary>
            The assert info response.
            </summary>
        </member>
        <member name="M:Norm.Responses.AssertInfoResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.AssertInfoResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.DatabaseAsserted">
            <summary>
            Indicates if the database asserted.
            </summary>
            <value>The DatabaseAsserted property gets the DatabaseAsserted data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.Asserted">
            <summary>
            Indicates that the database asserted or a user assert has happened
            </summary>
            <value>The Asserted property gets the Asserted data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.Assert">
            <summary>
            The assert.
            </summary>
            <value>The Assert property gets the Assert data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.WarningAssert">
            <summary>
            The warning assert.
            </summary>
            <value>The WarningAssert property gets the WarningAssert data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.AssertMessage">
            <summary>
            The assert message.
            </summary>
            <value>The AssertMessage property gets the AssertMessage data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.AssertUser">
            <summary>
            Gets or sets assert user.
            </summary>
            <value>The AssertUser property gets the AssertUser data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.UpdateOption">
            <summary>
            Update options.
            </summary>
        </member>
        <member name="T:Norm.Protocol.Messages.InsertMessage`1">
            <summary>
            Insert message.
            </summary>
            <typeparam retval="T">Type to insert</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.InsertMessage`1.#ctor(Norm.IConnection,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.InsertMessage`1"/> class.
            </summary>
            <param retval="connection">The connection.</param>
            <param retval="collectionName">The collection retval.</param>
            <param retval="itemsToInsert">The items to insert.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.InsertMessage`1.Execute">
            <summary>
            Execute.
            </summary>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
        </member>
        <member name="T:Norm.GridFS.GridFile">
            <summary>
            Represents a large binary object in the database.
            </summary>
        </member>
        <member name="P:Norm.GridFS.GridFile.Chunks">
            <summary>
            The collection in which this file's chunks live.
            </summary>
        </member>
        <member name="P:Norm.GridFS.GridFile.CachedChunks">
            <summary>
            Lazily load the queryable chunks.
            </summary>
        </member>
        <member name="P:Norm.GridFS.GridFile.Id">
            <summary>
            The unique id associated with this file.
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.UploadDate">
            <summary>
            When was this file created?
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.MD5Checksum">
            <summary>
            The MD5 checksum.
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.FileName">
            <summary>
            The original file name for this file.
            </summary>
            <remarks>Optional.</remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.ContentType">
            <summary>
            The MIME type for this document.
            </summary>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.Aliases">
            <summary>
            File Aliases.
            </summary>
            <remarks>Optional.</remarks>
        </member>
        <member name="P:Norm.GridFS.GridFile.Content">
            <summary>
            The content of this file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Norm.GridFS.FileChunk">
            <summary>
            A piece of the a GridFS file.
            </summary>
        </member>
        <member name="P:Norm.GridFS.FileChunk.Id">
            <summary>
            The id of this chunk.
            </summary>
        </member>
        <member name="P:Norm.GridFS.FileChunk.FileID">
            <summary>
            The file with which this chunk is associated.
            </summary>
        </member>
        <member name="P:Norm.GridFS.FileChunk.ChunkNumber">
            <summary>
            The number for this.
            </summary>
        </member>
        <member name="P:Norm.GridFS.FileChunk.BinaryData">
            <summary>
            The actual file bytes.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationMapException">
            <summary>
            </summary>
        </member>
        <member name="T:Norm.MongoException">
            <summary>
            Indicates an issue with some part of the messaging between C# and the MongoDB.
            </summary>
        </member>
        <member name="M:Norm.MongoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoException"/> class.
            </summary>
            <param retval="message">
            The message.
            </param>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMapException.#ctor(System.String)">
            <summary>
             Defines problems with type mappings.
            </summary>
            <param retval="message"></param>
        </member>
        <member name="T:MySoft.Data.DeleteCreator`1">
            <summary>
            删除创建器
            </summary>
        </member>
        <member name="T:MySoft.Data.DeleteCreator">
            <summary>
            删除创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator(System.String)">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.#ctor(System.String)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator`1.NewCreator">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="T:MySoft.Data.OrderByClip">
            <summary>
            排序构造器
            </summary>
        </member>
        <member name="F:MySoft.Data.OrderByClip.None">
            <summary>
            默认的无排序对象
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClip.#ctor">
            <summary>
            自定义一个OrderBy条件
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClip.#ctor(System.String)">
            <summary>
            自定义一个OrderBy条件
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="P:MySoft.Data.OrderByClip.Value">
            <summary>
            OrderBy的值
            </summary>
        </member>
        <member name="T:MySoft.Data.GroupByClip">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySoft.Data.GroupByClip.None">
            <summary>
            默认的无分组对象
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor">
            <summary>
            自定义一个GroupBy条件
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor(System.String)">
            <summary>
            自定义一个GroupBy条件
            </summary>
            <param name="groupBy"></param>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor(MySoft.Data.Field[])">
            <summary>
            自定义一个GroupBy条件
            </summary>
            <param name="fields"></param>
        </member>
        <member name="P:MySoft.Data.GroupByClip.Value">
            <summary>
            GroupBy的值
            </summary>
        </member>
        <member name="T:MySoft.Data.Logger.IExecuteCommand">
            <summary>
            执行并输出日志的接口
            </summary>
        </member>
        <member name="M:MySoft.Data.Logger.IExecuteCommand.BeginExecute(System.Data.Common.DbCommand)">
            <summary>
            开始执行命令，返回是否需要执行
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Logger.IExecuteCommand.EndExecute(System.Data.Common.DbCommand,MySoft.Data.ReturnValue,System.Int64)">
            <summary>
            结束执行命令
            </summary>
            <param name="command"></param>
            <param name="retValue"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="T:MySoft.Data.SqlServer.SqlServerProvider">
            <summary>
            SQL Server 2000 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="itemCount"></param>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SqlServer.SqlServerProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.SqlServer.SqlServerProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:Norm.Responses.CurrentOperationContainer">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Responses.CurrentOperationContainer.Responses">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Responses.CurrentOperationResponse">
            <summary>
            The current operation response.
            </summary>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.OperationId">
            <summary>TODO::Description.</summary>
            <value>The operation Id</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Operation">
            <summary>TODO::Description.</summary>
            <value>The operation</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Namespace">
            <summary>TODO::Description.</summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.LockType">
            <summary>TODO::Description.</summary>
            <value>The lock type.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.WaitingForLock">
            <summary>TODO::Description.</summary>
            <value>If it is waiting to be locked.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Active">
            <summary>TODO::Description.</summary>
            <value>If it is active.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Client">
            <summary>TODO::Description.</summary>
            <value>The client.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Query">
            <summary>TODO::Description.</summary>
            <value>The query.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.InLock">
            <summary>TODO::Description.</summary>
            <value>How long it is/was in a lock.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.SecondsRunning">
            <summary>TODO::Description.</summary>
            <value>How long it is/was running</value>
        </member>
        <member name="T:Norm.Responses.CollectionInfo">
            <summary>
            The collection info.
            </summary>
        </member>
        <member name="P:Norm.Responses.CollectionInfo.Name">
            <summary>
            The collection retval.
            </summary>
            <value>The Name property gets/sets the Name data member.</value>
        </member>
        <member name="P:Norm.Responses.CollectionInfo.Options">
            <summary>
            The create collection options.
            </summary>
            <value>The Options property gets the Options data member.</value>
        </member>
        <member name="T:Norm.MongoDatabase">
            <summary>
            Mongo database
            </summary>
        </member>
        <member name="T:Norm.IMongoDatabase">
            <summary>
            <see cref="T:Norm.MongoDatabase"/>
            </summary>
        </member>
        <member name="M:Norm.MongoDatabase.#ctor(System.String,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoDatabase"/> class.
            </summary>
            <param retval="databaseName">The database retval.</param>
            <param retval="connection">The connection.</param>
        </member>
        <member name="M:Norm.MongoDatabase.CreateMapReduce">
            <summary>
            The create map reduce.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection(System.String)">
            <summary>
            The get collection.
            </summary>
            <param retval="collectionName">The collection retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection``1(System.String)">
            <summary>
            Gets a collection.
            </summary>
            <typeparam retval="T">collection type</typeparam>
            <param retval="collectionName">The collection retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection``1">
            <summary>
            Gets a collection.
            </summary>
            <typeparam retval="T">Collection type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetAllCollections">
            <summary>
            Gets all collections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollectionStatistics(System.String)">
            <summary>
            Gets collection statistics.
            </summary>
            <param retval="collectionName">The collection retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.DropCollection(System.String)">
            <summary>
            Drops a collection.
            </summary>
            <param retval="collectionName">The collection retval.</param>
            <returns>The drop collection.</returns>
        </member>
        <member name="M:Norm.MongoDatabase.CreateCollection(Norm.Collections.CreateCollectionOptions)">
            <summary>
            Creates a collection.
            </summary>
            <param retval="options">The options.</param>
            <returns>The create collection.</returns>
        </member>
        <member name="M:Norm.MongoDatabase.SetProfileLevel(Norm.Protocol.SystemMessages.ProfileLevel)">
            <summary>
            Sets the profile level.
            </summary>
            <param retval="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetProfilingInformation">
            <summary>
            Gets profiling information.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoDatabase.ValidateCollection(System.String,System.Boolean)">
            <summary>
            Validates a collection.
            </summary>
            <param retval="collectionName">The collection retval.</param>
            <param retval="scanData">The scan data.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.LastError">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.MongoDatabase.LastError(System.Int32)">
            <summary>
            An overload of LastError requireing a number of servers 
            last write complete before lasterror will return.
            </summary>
            <param name="waitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.LastError(System.Int32,System.Int32)">
            <summary>
            An overload of LastError requireing a number of servers 
            last write complete before lasterror will return, or the amount 
            of time to wait for writes to complete before returning.
            </summary>
            <param name="waitCount"></param>
            <param name="waitTimeout"></param>
            <exception cref="T:Norm.MongoException">If the timeout is exceeded, a MongoException is thrown.</exception>
            <returns></returns>
        </member>
        <member name="P:Norm.MongoDatabase.CurrentConnection">
            <summary>
            Gets the current connection.
            </summary>
        </member>
        <member name="P:Norm.MongoDatabase.DatabaseName">
            <summary>
            Gets the dtabase retval.
            </summary>
        </member>
        <member name="T:Norm.Linq.MapReduceParameters">
            <summary>
            Javascript functions used to perform a map/reduce
            </summary>
        </member>
        <member name="T:Norm.Server">
            <summary>
            Server details
            </summary>
        </member>
        <member name="P:Norm.Server.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Norm.Server.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:Norm.IOptionsContainer">
            <summary>
            Options container.
            </summary>
        </member>
        <member name="M:Norm.IOptionsContainer.SetQueryTimeout(System.Int32)">
            <summary>
            Sets the query timeout.
            </summary>
            <param retval="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetStrictMode(System.Boolean)">
            <summary>
            Sets strict mode.
            </summary>
            <param retval="strict">The strict.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetPoolSize(System.Int32)">
            <summary>
            Sets yhe pool size.
            </summary>
            <param retval="size">The size.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled flag.
            </summary>
            <param retval="pooled">The pooled.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param retval="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetLifetime(System.Int32)">
            <summary>
            Sets the connection lifetime.
            </summary>
            <param retval="lifetime">The lifetime.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetWriteCount(System.Int32)">
            <summary>
            Sets the number of servers that must have the data written before writes will return in "strict mode"
            </summary>
            <param name="writeCount"></param>
        </member>
        <member name="T:Norm.Q">
            <summary>
            Qualifier operations.
            Provides a way to specify some of the "special" qualifiers that can be used for querying.
            </summary>
            <remarks>
            This should remain in the Norm namespace so that it's available 
            automatically when someone is using a MongoCollection.
            </remarks>
        </member>
        <member name="M:Norm.Q.IsNull">
            <summary>
            Construct an "equals" qualifier testing for Null.
            </summary>
            <remarks>
            This is just sugar, it returns an object reference to null.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.IsNotNull">
            <summary>
            Construct a {$ne : null} qualifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Or(System.Object[])">
            <summary>
            Produces an "$or" qualifier where each of the groups is a set of criteria.
            </summary>
            <param name="orGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Or(System.Collections.IEnumerable)">
            <summary>
            Produces an "$or" qualifier where each of the groups is a set of criteria.
            </summary>
            <param name="orGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Slice(System.Int32)">
            <summary>
            Produces a single element $slice at the specific index.
            </summary>
            <param name="index">The single index that the slice will be used with.</param>
        </member>
        <member name="M:Norm.Q.Slice(System.Int32,System.Int32)">
            <summary>
            Produces a $slice qualifier at starting at the left index and going to the right index.
            </summary>
            <param name="left">The first index for the slice.</param>
            <param name="right">The second index for the slice.</param>
        </member>
        <member name="M:Norm.Q.Where(System.String)">
            <summary>
            construct a $where qualifier
            </summary>
            <param retval="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessThan(System.Double)">
            <summary>
            Builds a $lt qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessThan(System.Object)">
            <summary>
            Builds a $lt qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessOrEqual(System.Double)">
            <summary>
            Builds a $lte qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessOrEqual(System.Object)">
            <summary>
            Builds a $lte qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterOrEqual(System.Double)">
            <summary>
            Builds a $gte qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterOrEqual(System.Object)">
            <summary>
            Builds a $gte qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterThan(System.Double)">
            <summary>
            Builds a $gt qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterThan(System.Object)">
            <summary>
            Builds a $gt qualifier for the search.
            </summary>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.All``1(``0[])">
            <summary>
            Builds an $all statement
            </summary>
            <typeparam retval="T">Type to qualify</typeparam>
            <param retval="all">All.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.In``1(``0[])">
            <summary>
            Builds an $in qualifier statement.
            </summary>
            <typeparam retval="T">Type to qualify</typeparam>
            <param retval="inSet">The in set.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.NotEqual``1(``0)">
            <summary>
            Builds a $ne qualifier against the value.
            </summary>
            <typeparam retval="T">Type to compare for equality</typeparam>
            <param retval="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Equals``1(``0)">
            <summary>
            Passes the value straight back to you, new { Property = "value"} will
            work just fine as a qualifier. Here for the sake of consistency.
            </summary>
            <typeparam retval="T">Type to compare for equality</typeparam>
            <param retval="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Size(System.Double)">
            <summary>
            Builds a $size qualifier.
            </summary>
            <param retval="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.NotIn``1(``0[])">
            <summary>
            Builds an $nin qualifier statement.
            </summary>
            <typeparam retval="T">Type to qualify</typeparam>
            <param retval="inSet">The in set.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.ElementMatch``1(``0)">
            <summary>
            constructs a $elemMatch qualifier statement.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="matchDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Matches(System.String)">
            <summary>
            returns a constructed regex to be used to match the specified property retval in the DB.
            </summary>
            <param retval="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Exists(System.Boolean)">
            <summary>
            Builds an $exists qualifier for the search.
            </summary>
            <param retval="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Commands.Qualifiers.GreaterOrEqualQualifier">
            <summary>
            The greater or equal qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.GreaterOrEqualQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.GreaterOrEqualQualifier"/> class.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.Commands.Modifiers.PushAllOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PushAllOperation`1.#ctor(`0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile">
            <summary>
            Allows for the saving of filestreams into the DB with meta data.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.OpenFile(Norm.Mongo,Norm.ObjectId)">
            <summary>
            Opens a file from the default namespace "fs"
            </summary>
            <param retval="db"></param>
            <param retval="fileKey"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.OpenFile(Norm.Collections.IMongoCollection,Norm.ObjectId)">
            <summary>
            
            </summary>
            <param retval="collection"></param>
            <param retval="fileKey"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.CreateFile(Norm.Mongo)">
            <summary>
            Construct a file from the db.
            </summary>
            <param retval="db"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.#ctor(Norm.Collections.IMongoCollection,Norm.ObjectId)">
            <summary>
            Open a grid file from the collection
            </summary>
            <param retval="collection"></param>
            <param retval="fileKey"></param>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.Save">
            <summary>
            Writes the information to the file stream.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile.FileChunk">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.FileChunk.#cctor">
            <summary>
            Causes the property mapping to kick in.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.ID">
            <summary>
            The unique id for this chunk.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.SequenceID">
            <summary>
            The order of this chunk with relation to it's siblings.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.FileID">
            <summary>
            Indicates the file to which this chunk belongs.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.Payload">
            <summary>
            The binary data in this chunk.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile.FileMetadata">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.FileMetadata.#cctor">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.FileName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ContentType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.Length">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ChunkSize">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.UploadDate">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.Aliases">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.MetaData">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.MD5Checksum">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.BSONTypes">
            <summary>
            Represents the various  types available from within MongoDB
            </summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Double">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.String">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Object">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Array">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Binary">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Undefined">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.MongoOID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Boolean">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.DateTime">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Null">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Regex">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Reference">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Code">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Symbol">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.ScopedCode">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Int32">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Timestamp">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Int64">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:MySoft.Data.PageSection">
            <summary>
            分页器
            </summary>
        </member>
        <member name="M:MySoft.Data.PageSection.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection.ToList``1(System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection.ToDataSet(System.Int32)">
            <summary>
            返回DataSet
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.PageSection.PageCount">
            <summary>
            返回页数
            </summary>
        </member>
        <member name="P:MySoft.Data.PageSection.RowCount">
            <summary>
            返回记录数
            </summary>
        </member>
        <member name="T:MySoft.Data.Validator`1">
            <summary>
            实体验证类
            </summary>
        </member>
        <member name="M:MySoft.Data.Validator`1.#ctor(`0)">
            <summary>
            实例化验证类
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MySoft.Data.Validator`1.Check(System.Predicate{`0},MySoft.Data.Field,System.String)">
            <summary>
            验证实体属性的有效性并返回错误列表(只验证需要插入或更新的列)
            </summary>
            <param name="predicate"></param>
            <param name="field"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Validator`1.Result">
            <summary>
            验证的结果
            </summary>
        </member>
        <member name="T:MySoft.Data.MsAccess.MsAccessProvider">
            <summary>
            Access 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.MsAccess.MsAccessProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.MsAccess.MsAccessProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.AccessProvider">
            <summary>
            是否为access驱动
            </summary>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:Norm.Responses.MapReduceResponse">
            <summary>
            The map reduce response.
            </summary>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.PrepareForQuerying(Norm.IMongoDatabase)">
            <summary>
            The prepare for querying.
            </summary>
            <param retval="database">The database.</param>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.GetCollection(System.String)">
            <summary>
            Gets a collection.
            </summary>
            <param retval="collectionName">The collection retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.GetCollection``1">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam retval="T">Collection type</typeparam>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.Result">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.Counts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.TimeMillis">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.MapReduceResponse.MapReduceCount">
            <summary>
            The map reduce count.
            </summary>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Input">
            <summary>
            Gets or sets Input.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Emit">
            <summary>
            Gets or sets Emit.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Output">
            <summary>
            Gets or sets Output.
            </summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.ProfileLevel">
            <summary>
            Profiling levels.
            </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.ProfilingOff">
            <summary>
            Profiling off.
            </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.SlowOperations">
             <summary>
            Slow operations.
             </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.AllOperations">
            <summary>
            All operations.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoTypeConfiguration">
            <summary>
            This class holds all configuration information for type mapping.
            </summary>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration.RemoveMappings``1">
            <summary>
            Remove mappings for the specifed type.
            </summary>
            <remarks>
            This is primarily defined for support of unit testing, 
            you may use it for client code, but you should *NEVER* call it with types
            defined in the Norm library.
            </remarks>
            <typeparam retval="T">The type from which to remove mappings.</typeparam>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.PropertyMaps">
            <summary>
            Gets the property maps.
            </summary>
            <value>The property maps.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.ConnectionStrings">
            <summary>
            Gets the connection strings.
            </summary>
            <value>The connection strings.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.CollectionNames">
            <summary>
            Gets the collection names.
            </summary>
            <value>The collection names.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.DiscriminatedTypes">
            <summary>
            Gets the discriminated types
            </summary>
            <value>True if a type is marked as a discriminated type, otherwise false.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.GreaterThanQualifier">
            <summary>
            The greater than qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.GreaterThanQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.GreaterThanQualifier"/> class.
            </summary>
            <param retval="value">The value.</param>
        </member>
        <member name="T:Norm.Commands.Modifiers.PushOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PushOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Commands.Modifiers.PullOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PullOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.IdPropertyFinder">
            <summary>
             Determines the best property to be used as the identifier property.
            </summary>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.#ctor(System.Type)">
            <summary>
             Initializes new IdPropertyFinder.
            </summary>
            <param retval="type">The type for which an id property needs to be identified.</param>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.#ctor(System.Type,System.Reflection.PropertyInfo[])">
            <summary>
             Initializes new IdPropertyFinder.
             Use this constructor to limit the properties you want to test.
            </summary>
            <param retval="type">The type for which an id property needs to be identified.</param>
            <param retval="properties">The candidate properties fo the type.</param>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.PropertyIsExplicitlyMappedToId(System.String)">
            <summary>
            Determines if the Id has been explicitly defined in a MongoConfigurationMap <see cref="T:Norm.Configuration.MongoConfigurationMap"/>.
            </summary>
            <param retval="idPropertyCandidate">The property retval.</param>
        </member>
        <member name="P:Norm.BSON.IdPropertyFinder.IdProperty">
            <summary>
             Returns the property determined to be the Id with the following priority.
             Property named _id
             Explicitly mapped Id property
             Attribute defined Id property
             Property named Id
             Conflicts result in MongoConfigurationMapException.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.ObjectIdGenerator">
            <summary>
            Shameless-ly ripped off, then slightly altered from samus' implementation on GitHub
            http://github.com/samus/mongodb-csharp/blob/f3bbb3cd6757898a19313b1af50eff627ae93c16/MongoDBDriver/ObjectIdGenerator.cs
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.epoch">
            <summary>
            The epoch.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.inclock">
            <summary>
            The inclock.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.inc">
            <summary>
            The inc.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.machineHash">
            <summary>
            The machine hash.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.procID">
            <summary>
            The proc id.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.ObjectIdGenerator"/> class. 
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.Generate">
            <summary>
            Generates a byte array ObjectId.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateTime">
            <summary>
            Generates time.
            </summary>
            <returns>
            The time.
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateInc">
            <summary>
            Generate an increment.
            </summary>
            <returns>
            The increment.
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateConstants">
            <summary>
            Generates constants.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateHostHash">
            <summary>
            Generates a host hash.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateProcId">
            <summary>
            Generates a proc id.
            </summary>
            <returns>
            Proc id.
            </returns>
        </member>
        <member name="T:Norm.BSON.BsonDeserializer">
            <summary>
            BSON Deserializer
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonSerializerBase.UseConfiguration(Norm.Configuration.IMongoConfigurationMap)">
            <summary>
            Use a specific configuration instance instead of the default.
            </summary>
            <remarks>This is by no way thread safe and is only intended for use in the internal automated tests.</remarks>
            <param name="config"></param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.BsonDeserializer"/> class.
            </summary>
            <param retval="reader">The reader.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="objectData">The object data.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Byte[],System.Collections.Generic.IDictionary{System.WeakReference,Norm.BSON.Expando}@)">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="objectData">The object data.</param>
            <param retval="outProps">The out props.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Int32,System.IO.BinaryReader,System.Collections.Generic.IDictionary{System.WeakReference,Norm.BSON.Expando}@)">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="objectData">The object data.</param>
            <param retval="outProps">The out props.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.IO.BinaryReader)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <typeparam retval="T"></typeparam>
            <param retval="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Read(System.Int32)">
            <summary>
            Reads the specified document forward by the input value.
            </summary>
            <param retval="read">Read length.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.IsDone">
            <summary>
            Determines whether there is more to read.
            </summary>
            <returns>
            	<c>true</c> if this instance is read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.NewDocument(System.Int32)">
            <summary>
            Creates a new document.
            </summary>
            <param retval="length">The document length.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.DeserializeValue(System.Type,Norm.BSON.BSONTypes)">
            <summary>
            Deserializes the value.
            </summary>
            <param retval="type">The type.</param>
            <param retval="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.DeserializeValue(System.Type,Norm.BSON.BSONTypes,System.Object)">
            <summary>
            Applies optional type conversion and deserializes the value.
            </summary>
            <param retval="type">The type.</param>
            <param retval="storedType">Type of the stored.</param>
            <param retval="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.DeserializeValueAfterConversion(System.Type,Norm.BSON.BSONTypes,System.Object)">
            <summary>
            Deserializes the value after any type conversion has been applied.
            </summary>
            <param name="type">The type.</param>
            <param name="storedType">Type of the stored.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadObject(System.Type)">
            <summary>
            Reads an object.
            </summary>
            <param retval="type">The object type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadList(System.Type,System.Object)">
            <summary>
            Reads a list.
            </summary>
            <param retval="listType">Type of the list.</param>
            <param retval="existingContainer">The existing container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a dictionary.
            </summary>
            <param retval="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is a dictionary; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadDictionary(System.Type,System.Object)">
            <summary>
            Reads a dictionary.
            </summary>
            <param retval="listType">Type of the list.</param>
            <param retval="existingContainer">The existing container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadBinary">
            <summary>
            Reads binary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadName">
            <summary>
            Reads a retval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadString">
            <summary>
            Reads a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadInt(Norm.BSON.BSONTypes)">
            <summary>
            Reads ag int.
            </summary>
            <param retval="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadLong(Norm.BSON.BSONTypes)">
            <summary>
            Reads a long.
            </summary>
            <param retval="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadEnum(System.Type,Norm.BSON.BSONTypes)">
            <summary>
            Reads an enum.
            </summary>
            <param retval="type">The type.</param>
            <param retval="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadRegularExpression">
            <summary>
            Reads the regular expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadType">
            <summary>
            Reads a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadScopedCode">
            <summary>
            Reads scoped code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadFlyweight">
            <summary>
            Reads a flyweight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.HandleError(System.String)">
            <summary>
            Handles ab error.
            </summary>
            <param retval="message">The message.</param>
        </member>
        <member name="T:MySoft.Data.ISourceReader">
            <summary>
            读数据接口
            </summary>
        </member>
        <member name="T:MySoft.Data.IListConvert`1">
            <summary>
            列表转换
            </summary>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertTo``1">
            <summary>
            返回另一类型的列表
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertTo``2">
            <summary>
            返回另一类型的列表(输出为接口)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前类型转成另一种类型
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.IRowReader">
            <summary>
            行数据阅读器
            </summary>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.ToEntity``1">
            <summary>
            转换成指定对象
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IRowReader.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IRowReader.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.IDataSource`1">
            <summary>
            数据源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MySoft.Data.IDataSource`1.OriginalData">
            <summary>
            数据源
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceReader.Close">
            <summary>
            关闭DbReader
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceReader.Read">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceReader.ToTable">
            <summary>
            转换为SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceReader.NextResult">
            <summary>
            返回下一结果集
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ISourceReader.FieldCount">
            <summary>
            获取字段数
            </summary>
        </member>
        <member name="T:MySoft.Data.DbField">
            <summary>
            数据库字段
            </summary>
        </member>
        <member name="P:MySoft.Data.DbField.Name">
            <summary>
            返回原始字段名称
            </summary>
        </member>
        <member name="M:MySoft.Data.IProvider.SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            设置驱动
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="T:MySoft.Data.CustomField">
            <summary>
            系统字段
            </summary>
        </member>
        <member name="M:MySoft.Data.CustomField.MySoft#Data#IProvider#SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            处理qString;
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="P:MySoft.Data.CustomField.Name">
            <summary>
            重载名称
            </summary>
        </member>
        <member name="T:MySoft.Data.CustomField`1">
            <summary>
            系统字段
            </summary>
        </member>
        <member name="M:MySoft.Data.CustomField`1.MySoft#Data#IProvider#SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            处理qString;
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="P:MySoft.Data.CustomField`1.Name">
            <summary>
            重载名称
            </summary>
        </member>
        <member name="T:MySoft.Data.EntityState">
            <summary>
            Entity状态
            </summary>
        </member>
        <member name="F:MySoft.Data.EntityState.Insert">
            <summary>
            插入状态
            </summary>
        </member>
        <member name="F:MySoft.Data.EntityState.Update">
            <summary>
            修改状态
            </summary>
        </member>
        <member name="T:MySoft.Data.TopQuery`1">
            <summary>
            Top对应的Query查询
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.CreateQuery``1">
            <summary>
            CreateQuery
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.GetPage(System.Int32)">
            <summary>
            获取分页
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToListResult">
            <summary>
            返回结果列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToListResult``1">
            <summary>
            返回结果列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToList">
            <summary>
            返回实体列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToList``1">
            <summary>
            返回实体列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToReader">
            <summary>
            返回阅读器
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToTable">
            <summary>
            返回表数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.ToDataSet">
            <summary>
            返回数据集
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.SubQuery">
            <summary>
            创建子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.SubQuery(System.String)">
            <summary>
            创建子查询
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.SubQuery``1">
            <summary>
            创建子查询
            </summary>
            <typeparam name="TSub"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopQuery`1.SubQuery``1(System.String)">
            <summary>
            创建子查询
            </summary>
            <typeparam name="TSub"></typeparam>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.TopQuery`1.QueryString">
            <summary>
            QueryString
            </summary>
        </member>
        <member name="T:MySoft.Data.DecryptEventHandler">
            <summary>
            连接字符串解密
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DbHelper">
            <summary>
            数据库操作类
            </summary>
        </member>
        <member name="M:MySoft.Data.DbHelper.CreateCommand">
            <summary>
            创建命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbHelper.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.CollectionStatistics">
            <summary>
            MongoDB information related to a particular collection.
            </summary>
        </member>
        <member name="M:Norm.Responses.CollectionStatistics.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.CollectionStatistics"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.CurrentExtents">
            <summary>
            this correlates to the "numExtents" value that comes back from MongoDB -
            not sure what this is, maybe something to do with Sharding?
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.TotalIndexSize">
            <summary>
            Total size of all indices for this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.LastIndexSize">
            <summary>
            ?? The previous size of the indices on disk before some index operation??
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.IndexSizes">
            <summary>
            Each index and the size on disk of the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.PreviousExtentSize">
            <summary>
            Not sure what this is, correlates to "lastExtentSize"
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Flags">
            <summary>
            No idea what this is.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.PaddingFactor">
            <summary>
            The amount of space that is allocated so that 
            inserts can be done without moving pages on disk.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Namespace">
            <summary>
            The namespace in which this collection lives.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Count">
            <summary>
            Number of elements in this collection
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Size">
            <summary>
            The size of the data in this collection <see cref="P:Norm.Responses.CollectionStatistics.StorageSize"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.StorageSize">
            <summary>
            The size on disk of this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.NumberOfIndices">
            <summary>
            The number of indices currently defined on this collection.
            </summary>
            <remarks>
            This number shall always be greater or equal 
            to 1, as  _id automatically gets an index.
            </remarks>
            <value></value>
        </member>
        <member name="T:Norm.Linq.MongoQueryExecutor">
            <summary>
            Executes the query against the database
            </summary>
        </member>
        <member name="M:Norm.Linq.MongoQueryExecutor.#ctor(Norm.IMongoDatabase,Norm.Linq.QueryTranslationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQueryExecutor"/> class.
            </summary>
            <param retval="mongo">The database on which the query will be executed.</param>
            <param retval="translationResults">The results of the query translation</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryExecutor.Execute``1">
            <summary>
            Performs the query against the database
            </summary>
            <typeparam retval="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Norm.Linq.IMongoQuery">
            <summary>
            A mongo query.
            </summary>
        </member>
        <member name="M:Norm.Linq.IMongoQuery.GetExpression">
            <summary>
            Gets an expression.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Norm.NormalConnectionProvider">
            <summary>
            The normal connection provider.
            </summary>
        </member>
        <member name="M:Norm.NormalConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.NormalConnectionProvider"/> class.
            </summary>
            <param retval="builder">
            The builder.
            </param>
        </member>
        <member name="M:Norm.NormalConnectionProvider.Open(System.String)">
            <summary>
            Opens the connection
            </summary>
            <param retval="options">
            The options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.NormalConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param retval="connection">
            The connection.
            </param>
        </member>
        <member name="P:Norm.NormalConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.IConnection">
            <summary>
            A database connection
            </summary>
        </member>
        <member name="M:Norm.IConnection.GetStream">
            <summary>
            Gets a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.IConnection.Digest(System.String)">
            <summary>
            The digest.
            </summary>
            <param retval="nounce">The nounce.</param>
            <returns>The digest.</returns>
        </member>
        <member name="M:Norm.IConnection.LoadOptions(System.String)">
            <summary>
            Loads options.
            </summary>
            <param retval="options">The options.</param>
        </member>
        <member name="M:Norm.IConnection.ResetOptions">
            <summary>
            Resets options.
            </summary>
        </member>
        <member name="M:Norm.IConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an object.
            </summary>
            <param retval="bytes">The bytes.</param>
            <param retval="start">The start.</param>
            <param retval="size">The size.</param>
        </member>
        <member name="P:Norm.IConnection.VerifyWriteCount">
            <summary>
            Get the write count required to be returned from the server when strict mode is enabled.
            </summary>
        </member>
        <member name="P:Norm.IConnection.ConnectionString">
            <summary>
            The connection string used to create this connection.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Client">
            <summary>
            Gets the tcp client.
            </summary>
        </member>
        <member name="P:Norm.IConnection.IsConnected">
            <summary>
            Gets a value indicating whether the client is connected.
            </summary>
        </member>
        <member name="P:Norm.IConnection.IsInvalid">
            <summary>
            Gets a value indicating whether the connection is invalid.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Created">
            <summary>
            Gets the connection created date.
            </summary>
        </member>
        <member name="P:Norm.IConnection.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
        </member>
        <member name="P:Norm.IConnection.StrictMode">
            <summary>
            Gets a value indicating whether to use strict mode.
            </summary>
        </member>
        <member name="P:Norm.IConnection.UserName">
            <summary>
            Gets the user retval.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Database">
            <summary>
            Gets the database retval.
            </summary>
        </member>
        <member name="T:Norm.ConnectionProviderFactory">
            <summary>
            The connection provider factory.
            </summary>
        </member>
        <member name="M:Norm.ConnectionProviderFactory.Create(System.String)">
            <summary>
            Creates a connection provider.
            </summary>
            <param retval="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionProviderFactory.CreateNewProvider(Norm.ConnectionStringBuilder)">
            <summary>
            The create new provider.
            </summary>
            <param retval="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Configuration.PropertyMappingExpression">
            <summary>
            The property mapping expression.
            </summary>
        </member>
        <member name="T:Norm.Configuration.IPropertyMappingExpression">
            <summary>
            Defines a property mapping expression
            </summary>
        </member>
        <member name="M:Norm.Configuration.IPropertyMappingExpression.UseAlias(System.String)">
            <summary>
            Uses the alias for a given type's property.
            </summary>
            <param retval="alias">
            The alias.
            </param>
        </member>
        <member name="P:Norm.Configuration.IPropertyMappingExpression.SourcePropertyName">
            <summary>
            Gets or sets the retval of the source property.
            </summary>
            <value>The retval of the source property.</value>
        </member>
        <member name="M:Norm.Configuration.PropertyMappingExpression.UseAlias(System.String)">
            <summary>
            Uses the alias for a given type's property.
            </summary>
            <param retval="alias">
            The alias.
            </param>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.IsId">
            <summary>
            Gets or sets whether the property is the Id for the entity.
            </summary>
            <value>True if the property is the entity's Id.</value>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.SourcePropertyName">
            <summary>
            Gets or sets the retval of the source property.
            </summary>
            <value>The retval of the source property.</value>
        </member>
        <member name="T:Norm.Commands.Modifiers.AddToSetOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.AddToSetOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.Document.Length">
            <summary>
            Document length
            </summary>
        </member>
        <member name="F:Norm.BSON.Document.Parent">
            <summary>
            Document parent
            </summary>
        </member>
        <member name="F:Norm.BSON.Document.Digested">
            <summary>
            Digested (read/written)
            </summary>
        </member>
        <member name="T:MySoft.Data.SourceReader">
            <summary>
            自定义数据记录
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceReader.#ctor(System.Data.IDataReader)">
            <summary>
            初始化DbReader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.SourceReader.Read">
            <summary>
            读取下一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.NextResult">
            <summary>
            返回下一结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.Close">
            <summary>
            关闭DbReader
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertTo``1">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ToEntity``1">
            <summary>
            转换成指定对象
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertAll``1(System.Converter{MySoft.Data.IRowReader,``0})">
            <summary>
            通过委托来创建实体
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ToTable">
            <summary>
            转换为SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.FieldCount">
            <summary>
            获取字段数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceReader.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ISourceTable">
            <summary>
            数据源接口
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Select(System.String[])">
            <summary>
            选择某些列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Filter(System.String)">
            <summary>
            过虑数据
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Sort(System.String)">
            <summary>
            排序数据
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Add(System.String,System.Type)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Add(System.String,System.Type,System.String)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.SetOrdinal(System.String,System.Int32)">
            <summary>
            设置列的顺序
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Rename(System.String,System.String)">
            <summary>
            字段更名
            </summary>
            <param name="oldname"></param>
            <param name="newname"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Revalue``1(System.String,System.String,MySoft.Data.ReturnValue{``0})">
            <summary>
            按要求改变某列值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readName"></param>
            <param name="changeName"></param>
            <param name="revalue"></param>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Remove(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Fill(MySoft.Data.FillRelation,System.String[])">
            <summary>
            将另一个表中的某字段值按字段关联后进行填充
            </summary>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.ToReader">
            <summary>
            转换成SourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ISourceTable.RowCount">
            <summary>
            获取数据行数
            </summary>
        </member>
        <member name="P:MySoft.Data.ISourceTable.ColumnCount">
            <summary>
            获取数据列数
            </summary>
        </member>
        <member name="P:MySoft.Data.ISourceTable.Item(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Protocol.Messages.UpdateMessage`2">
            <summary>
            The update message.
            </summary>
            <typeparam retval="T">Document template Type</typeparam>
            <typeparam retval="U">Value document type</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.UpdateMessage`2.#ctor(Norm.IConnection,System.String,Norm.Protocol.Messages.UpdateOption,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.UpdateMessage`2"/> class.
            </summary>
            <param retval="connection">The connection.</param>
            <param retval="collection">The collection.</param>
            <param retval="options">The options.</param>
            <param retval="matchDocument">The match document.</param>
            <param retval="valueDocument">The value document.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.UpdateMessage`2.Execute">
            <summary>
            Execute.
            </summary>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
        </member>
        <member name="T:Norm.Protocol.MessageHeader">
            <summary>
            Provides information about how a particular 
            request/response should be managed.
            </summary>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.MessageLength">
            <summary>
            This is the total size of the
            message in bytes, include 4 bytes for 
            this MessageLength when setting.
            </summary>
            <value>The MessageLength property gets/sets the MessageLength data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.RequestID">
            <summary>
            A client -or- database generated identifier 
            that identifies this request.
            </summary>
            <value>The RequestID property gets/sets the RequestID data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.ResponseTo">
            <summary>
            Populated by the server, indicates which
            request is being fulfilled with this particlar response.
            </summary>
            <value>The ResponseTo property gets/sets the ResponseTo data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.OpCode">
            <summary>
            The action that should be taken by the DB.
            </summary>
            <value>The OpCode property gets/sets the OpCode data member.</value>
        </member>
        <member name="T:Norm.Linq.QueryTranslationResults">
            <summary>
            Holds information gathered from the Linq Translator
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.LessThanQualifier">
            <summary>
            The less than qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.LessThanQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.LessThanQualifier"/> class.
            Builds a less than qualifier, really ought to be a number (MAYBE a string)
            </summary>
            <param retval="value">The value.</param>
        </member>
        <member name="T:Norm.Commands.Qualifiers.AllQualifier`1">
            <summary>
            The all qualifier.
            </summary>
            <typeparam retval="T">
            </typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.AllQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.AllQualifier`1"/> class.
            </summary>
            <param retval="all">The value.</param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.CreateIndex``2(Norm.Collections.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean,Norm.Protocol.Messages.IndexOption)">
            <summary>
            Asynchronously creates an index on this collection.
            </summary>
            <param retval="index">This is an expression of the elements in the type you wish to index, so you can do something like:
            <code>
            y=>y.MyIndexedProperty
            </code>
            or, if you have a multi-fieldSelectionExpando index, you can do this:
            <code>
            y=> new { y.PropertyA, y.PropertyB.Property1, y.PropertyC }
            </code>
            This will automatically map the MongoConfiguration aliases.
            </param>
            <param retval="indexName">The retval of the index as it should appear in the special "system.indexes" child collection.</param>
            <param retval="isUnique">True if MongoDB can expect that each document will have a unique combination for this fieldSelectionExpando. 
            MongoDB will potentially optimize the index based on this being true.</param>
            <param retval="direction">Should all of the elements in the index be sorted Ascending, or Decending, if you need to sort each property differently, 
            you should use the Expando overload of this method for greater granularity.</param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``2(Norm.Collections.IMongoCollection{``0},``1,System.Int32,System.Int32,System.String)">
            <summary>
            Finds documents
            </summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <param retval="limit">The limit.</param>
            <param retval="skip">The skip.</param>
            <param retval="fullyQualifiedName">The fully qualified retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``2(Norm.Collections.IMongoCollection{``0},``1)">
            <summary>
            Return all documents matching the template
            </summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <returns></returns>
            <remarks>
            Ok, not all documents, just all documents up to Int32.MaxValue - if you bring that many back, you've crashed. Sorry.
            </remarks>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``2(Norm.Collections.IMongoCollection{``0},``1,System.Int32)">
            <summary>
            Get the documents that match the specified template.
            </summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <param retval="limit">The number to return from this command.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``2(Norm.Collections.IMongoCollection{``0},``1,System.Int32,System.Int32)">
            <summary>Finds the documents matching the template, an limits/skips the specified numbers.</summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <param retval="limit">The number to return from this command.</param>
            <param retval="skip">The skip step.</param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``3(Norm.Collections.IMongoCollection{``0},``1,``2,System.Int32,System.Int32)">
            <summary>Finds the documents matching the template, an limits/skips the specified numbers.</summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <typeparam retval="O">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <param retval="orderby">How to order the results</param>
            <param retval="limit">The number to return from this command.</param>
            <param retval="skip">The skip step.</param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``2(Norm.Collections.IMongoCollection{``0},``1,System.Int32,System.String)">
            <summary>
            The find.
            </summary>
            <typeparam retval="U">Type of document to find.</typeparam>
            <param retval="template">The template.</param>
            <param retval="limit">The limit.</param>
            <param retval="fullyQualifiedName">The fully qualified retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``3(Norm.Collections.IMongoCollection{``0},``1,``2)">
            <summary>
            Finds documents that match the template, and ordered according to the orderby document.
            </summary>
            <typeparam retval="U"></typeparam>
            <typeparam retval="S"></typeparam>
            <param retval="template">The spec document</param>
            <param retval="orderBy">The order specification</param>
            <returns>A set of documents ordered correctly and matching the spec.</returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Find``1(Norm.Collections.IMongoCollection{``0})">
            <summary>
            Find objects in the collection without any qualifiers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Insert``1(Norm.Collections.IMongoCollection{``0},``0[])">
            <summary>
            Inserts documents
            </summary>
            <param retval="documentsToInsert">
            The documents to insert.
            </param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.UpdateOne``3(Norm.Collections.IMongoCollection{``0},``1,``2)">
            <summary>
            Overload of Update that updates one document and doesn't upsert if no matches are found.
            </summary>
            <typeparam retval="X">Document to match</typeparam>
            <typeparam retval="U">Value document</typeparam>
            <param retval="matchDocument">The match Document.</param>
            <param retval="valueDocument">The value Document.</param>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Update``2(Norm.Collections.IMongoCollection{``0},``1,System.Action{Norm.Commands.Modifiers.IModifierExpression{``0}})">
            <summary>Allows a document to be updated using the specified action.</summary>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.Count``1(Norm.Collections.IMongoCollection{``0})">
            <summary>
            A count on this collection without any filter.
            </summary>
            <returns>The count.</returns>
        </member>
        <member name="M:Norm.MongoCollectionExtensions.DeleteIndices``1(Norm.Collections.IMongoCollection{``0},System.Int32@)">
            <summary>
            Deletes all indices on this collection.
            </summary>
            <param retval="numberDeleted">
            </param>
            <returns>
            The delete indices.
            </returns>
        </member>
        <member name="T:Norm.BSON.ObjectParser">
            <summary>
            Provides a mechanism for parsing JSON into an Expando.
            </summary>
        </member>
        <member name="F:Norm.BSON.ObjectParser._rxPair">
            <summary>
            deals with most of the possible quote escapes, but a few remain.
            </summary>
        </member>
        <member name="M:Norm.BSON.ObjectParser.ParseJSON(System.String)">
            <summary>
            Convert a string to an IExpando.
            </summary>
            <exception cref="!:">Throws an exception when the string passed in cannot be parsed.</exception>
            <param name="jsonToParse"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ReturnValue`1">
            <summary>
            获取返回值的委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.FillRelation">
            <summary>
            表信息填充关系
            </summary>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor">
            <summary>
            实例化填充关系
            </summary>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor(MySoft.Data.SourceTable,System.String)">
            <summary>
            实例化填充关系
            </summary>
            <param name="source"></param>
            <param name="relationName"></param>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor(MySoft.Data.SourceTable,System.String,System.String)">
            <summary>
            实例化填充关系
            </summary>
            <param name="source"></param>
            <param name="relationName"></param>
        </member>
        <member name="P:MySoft.Data.FillRelation.DataSource">
            <summary>
            填充用到的数据源
            </summary>
        </member>
        <member name="P:MySoft.Data.FillRelation.ParentName">
            <summary>
            关联的数据列
            </summary>
        </member>
        <member name="P:MySoft.Data.FillRelation.ChildName">
            <summary>
            关联的数据列
            </summary>
        </member>
        <member name="T:MySoft.Data.SourceTable">
            <summary>
            数据源
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor">
            <summary>
            实例化SourceTable
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor(System.String)">
            <summary>
            实例化SourceTable
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor(System.Data.DataTable)">
            <summary>
            实例化SourceTable
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Select(System.String[])">
            <summary>
            选择某些列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Filter(System.String)">
            <summary>
            过虑数据
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Sort(System.String)">
            <summary>
            排序数据
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Remove(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.SetOrdinal(System.String,System.Int32)">
            <summary>
            设置列的顺序
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Add(System.String,System.Type)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Add(System.String,System.Type,System.String)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Rename(System.String,System.String)">
            <summary>
            字段更名
            </summary>
            <param name="oldname"></param>
            <param name="newname"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Revalue``1(System.String,System.String,MySoft.Data.ReturnValue{``0})">
            <summary>
            按要求改变某列值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readName"></param>
            <param name="changeName"></param>
            <param name="revalue"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Fill(MySoft.Data.FillRelation,System.String[])">
            <summary>
            将另一个表中的某字段值按字段关联后进行填充
            </summary>
            <param name="relation"></param>
            <param name="fillNames"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertTo``1">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertAll``1(System.Converter{MySoft.Data.IRowReader,``0})">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.ToReader">
            <summary>
            转换成SourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceTable.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceTable.RowCount">
            <summary>
            获取数据行数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceTable.ColumnCount">
            <summary>
            获取数据列数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceTable.Item(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ArrayList`1">
            <summary>
            数组列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.IArrayList`1">
            <summary>
            可以输出Array的接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToArray">
            <summary>
            返回数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToDictionary``1(System.String)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToDictionary``1(MySoft.Data.Field)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="groupField"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IArrayList`1.Item(System.Int32)">
            <summary>
            获取当前索引的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            实例化ArrayList
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.ToDictionary``1(MySoft.Data.Field)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="groupField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.ToDictionary``1(System.String)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.Data.ArrayList`1.Item(System.Int32)">
            <summary>
            获取当前索引的对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ArrayList`1.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SourceList`1">
            <summary>
            数组列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.ISourceList`1">
            <summary>
            数据源接口
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.ToTable">
            <summary>
            转换成SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.ForEach(System.Action{`0})">
            <summary>
            循环item
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            排序，可以使用内部的SortComparer类来实现多列排序
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.FindAll(System.Predicate{`0})">
            <summary>
            查找符合条件的对象
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            返回指定数据条数
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            实例化SourceList
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:MySoft.Data.SourceList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ToTable">
            <summary>
            转换成SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertTo``1">
            <summary>
            返回另一类型的列表(用于实体的解耦))
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.FindAll(System.Predicate{`0})">
            <summary>
            查找符合条件的对象
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.Sort(MySoft.SortComparer{`0})">
            <summary>
            对当前列表进行排序
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.Sort(System.Int32,System.Int32,MySoft.SortComparer{`0})">
            <summary>
            对当前列表进行排序
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            返回指定数据条数
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前类型转成另一种类型
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.GetDataTable(System.Type)">
            <summary>
             转换成DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.TableRelation`1">
            <summary>
            关系表，可以用来存储关联信息
            </summary>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.GetFromSection">
            <summary>
            获取FromSection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery``1(System.String)">
            <summary>
            生成一个带别名的子查询
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.Where(MySoft.Data.WhereClip)">
            <summary>
            进行条件操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行排序操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行分组操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.Select(MySoft.Data.Field[])">
            <summary>
            进行查询操作
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.GetTop(System.Int32)">
            <summary>
            获取前n条数据
            </summary>
            <param name="topSize"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ReturnValue">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:MySoft.Data.ReturnValue.Data">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:MySoft.Data.ReturnValue.Error">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:MySoft.Data.ReturnValue.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:MySoft.Data.ReturnValue.IsError">
            <summary>
            是否有异常
            </summary>
        </member>
        <member name="T:Norm.Protocol.ExplainRequest`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Protocol.ExplainRequest`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
            <param retval="query">The query.</param>
        </member>
        <member name="P:Norm.Protocol.ExplainRequest`1.Explain">
            <summary>
            Tells the server to explain the query.
            </summary>
            <remarks>
            THIS SHOULD ALWAYS BE DEFINED BEFORE QUERY!
            </remarks>
            <value>The Explain property gets the Explain data member.</value>
        </member>
        <member name="P:Norm.Protocol.ExplainRequest`1.Query">
            <summary>
            The query that should be used.
            </summary>
            <value>The Query property gets/sets the Query data member.</value>
        </member>
        <member name="T:Norm.Linq.MongoQuery`1">
            <summary>
            A default implementation of IQueryable for use with QueryProvider
            </summary>
            <typeparam retval="T">Type to query; also the underlying collection type.</typeparam>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.#ctor(Norm.Linq.MongoQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQuery`1"/> class.
            </summary>
            <param retval="provider">
            The provider.
            </param>
            <param retval="collectionName">
            The collection retval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.#ctor(Norm.Linq.MongoQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQuery`1"/> class.
            </summary>
            <param retval="provider">
            The provider.
            </param>
            <param retval="expression">
            The expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetExpression">
            <summary>
            Gets an expression.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerable.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.Explain(Norm.BSON.Expando)">
            <summary>
            Gets an explain plan.
            </summary>
            <param retval="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetCollection``1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetCollection``1(System.String)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.ToString">
            <summary>
            Returns the query in string format
            </summary>
            <returns>The to string.</returns>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets IQueryable.Expression.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            Gets IQueryable.ElementType.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            Gets IQueryable.Provider.
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.SizeQualifier">
            <summary>
            The size qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.SizeQualifier.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.SizeQualifier"/> class.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.PullAllOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.PullAllOperation`1.#ctor(`0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Collections.CreateCollectionOptions">
            <summary>
            The create collection options.
            </summary>
        </member>
        <member name="M:Norm.Collections.CreateCollectionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.CreateCollectionOptions"/> class.
            </summary>
        </member>
        <member name="M:Norm.Collections.CreateCollectionOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.CreateCollectionOptions"/> class.
            </summary>
            <param retval="retval">
            The retval.
            </param>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Capped">
            <summary>
            Gets or sets a value indicating whether Capped.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Size">
            <summary>
            Gets or sets Size.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Max">
            <summary>
            Gets or sets Max.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.AutoIndexId">
            <summary>
            Gets or sets a value indicating whether AutoIndexId.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Create">
            <summary>
            Gets or sets Create.
            </summary>
        </member>
        <member name="T:Norm.BSON.ExpandoProperty">
            <summary>
            Expando Property
            </summary>
            <remarks>
            This is a glorified KeyValuePair - but this leaves 
            us more "open" to hooking extra stuff on, if we need to at some later point.
            </remarks>
        </member>
        <member name="M:Norm.BSON.ExpandoProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.ExpandoProperty"/> class.
            </summary>
            <param retval="retval">The retval.</param>
            <param retval="value">The value.</param>
        </member>
        <member name="P:Norm.BSON.ExpandoProperty.PropertyName">
            <summary>
            Gets or sets the retval of the property.
            </summary>
            <value>The retval of the property.</value>
        </member>
        <member name="P:Norm.BSON.ExpandoProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MySoft.Data.Design.SequenceAttribute">
            <summary>
            定义自增长列
            </summary>
        </member>
        <member name="T:MySoft.Data.SourceRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceRow.#ctor(System.Data.DataRow)">
            <summary>
            实例化DbRow
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:MySoft.Data.SourceRow.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.ToEntity``1">
            <summary>
            转换成指定对象
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.EntityConfig">
            <summary>
            映像配置类
            </summary>
        </member>
        <member name="F:MySoft.Data.EntityConfig.Instance">
            <summary>
            配置实例
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityConfig.Refresh">
            <summary>
            刷新配置
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetTableTimeout``1">
            <summary>
            获取表超时时间
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetMappingTable``1(System.String)">
            <summary>
            获取映射的表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetMappingField``1(System.String,System.String)">
            <summary>
            获取映射的字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.EntityCache`1">
            <summary>
            Entity cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.EntityCache`1.Create">
            <summary>
            创建缓存对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityCache`1.New">
            <summary>
            创建一个新对象
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityCache`1.Get(System.Func{`0})">
            <summary>
            获取缓存对象
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.DeleteIndicesResponse">
            <summary>
            The delete indices response.
            </summary>
        </member>
        <member name="M:Norm.Responses.DeleteIndicesResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.DeleteIndicesResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.NumberIndexesWas">
            <summary>
            Gets or sets the number of previous indexes.
            </summary>
            <value>The number indexes was.</value>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Norm.MongoQueryExecutor`3">
            <summary>
            Acts as a proxy for query execution so additional paramaters like
            hints can be added with a more fluent syntax around IEnumerable
            and IQueryable.
            </summary>
            <typeparam retval="T">The type to query</typeparam>
            <typeparam retval="U">Document template type</typeparam>
            <typeparam retval="O">The output type.</typeparam>
        </member>
        <member name="M:Norm.MongoQueryExecutor`3.AddHint(System.String,Norm.Protocol.Messages.IndexOption)">
            <summary>
            Adds a query hint.
            </summary>
            <param retval="hint">The hint.</param>
            <param retval="direction">The index direction; ascending or descending.</param>
        </member>
        <member name="M:Norm.MongoQueryExecutor`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Norm.MongoQueryExecutor`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Norm.MongoQueryExecutor`3.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Norm.GridFS.Helpers">
            <summary>
            Extension methods for gaining access to GridFS.
            </summary>
        </member>
        <member name="M:Norm.GridFS.Helpers.Files``1(Norm.Collections.IMongoCollection{``0})">
            <summary>
            Gets a file collection from the specified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rootCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.GridFS.Helpers.Files(Norm.IMongoDatabase)">
            <summary>
            Gets the file collection from the specified database.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Connection">
            <summary>
            TCP client MongoDB connection
            </summary>
        </member>
        <member name="M:Norm.Connection.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Connection"/> class.
            </summary>
            <param retval="builder">The builder.</param>
        </member>
        <member name="M:Norm.Connection.Digest(System.String)">
            <summary>
            Digests the specified nonce.
            </summary>
            <param retval="nonce">The nonce.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Connection.CreatePasswordDigest">
            <summary>
            Create the password digest from the username and password.
            </summary>
            <returns>The password digest.</returns>
        </member>
        <member name="M:Norm.Connection.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Connection.LoadOptions(System.String)">
            <summary>
            Loads the options.
            </summary>
            <param retval="options">The options.</param>
        </member>
        <member name="M:Norm.Connection.SetWriteCount(System.Int32)">
            <summary>
            Sets the number of servers that writes must be written to before writes return when in strict mode.
            </summary>
            <param name="writeCount"></param>
        </member>
        <member name="M:Norm.Connection.ResetOptions">
            <summary>
            Resets the options.
            </summary>
        </member>
        <member name="M:Norm.Connection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified bytes.
            </summary>
            <param retval="bytes">The bytes.</param>
            <param retval="start">The start.</param>
            <param retval="size">The size.</param>
        </member>
        <member name="M:Norm.Connection.SetQueryTimeout(System.Int32)">
            <summary>
            Sets the query timeout.
            </summary>
            <param retval="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.Connection.SetStrictMode(System.Boolean)">
            <summary>
            Sets the strict mode.
            </summary>
            <param retval="strict">if set to <c>true</c> [strict].</param>
        </member>
        <member name="M:Norm.Connection.SetPoolSize(System.Int32)">
            <summary>
            Sets the size of the pool.
            </summary>
            <param retval="size">The size.</param>
        </member>
        <member name="M:Norm.Connection.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled.
            </summary>
            <param retval="pooled">if set to <c>true</c> [pooled].</param>
        </member>
        <member name="M:Norm.Connection.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param retval="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.Connection.SetLifetime(System.Int32)">
            <summary>
            Sets the lifetime.
            </summary>
            <param retval="lifetime">The lifetime.</param>
        </member>
        <member name="M:Norm.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Norm.Connection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param retval="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Norm.Connection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Norm.Connection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Norm.Connection.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:Norm.Connection.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Norm.Connection.IsInvalid">
            <summary>
            Gets a value indicating whether this instance is invalid.
            </summary>
            <value>
            	<c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Norm.Connection.Created">
            <summary>
            Gets the created date and time.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:Norm.Connection.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
            <value>The query timeout.</value>
        </member>
        <member name="P:Norm.Connection.StrictMode">
            <summary>
            Gets a value indicating whether to use strict mode.
            </summary>
            <value><c>true</c> if strict mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Norm.Connection.UserName">
            <summary>
            Gets the retval of the user.
            </summary>
            <value>The retval of the user.</value>
        </member>
        <member name="P:Norm.Connection.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:Norm.Connection.VerifyWriteCount">
            <summary>
            Get the write count required to be returned from the server when strict mode is enabled.
            </summary>
        </member>
        <member name="T:Norm.Configuration.ITypeConfiguration">
            <summary>
            Defines a type's collection retval and connection string.
            </summary>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.UseCollectionNamed(System.String)">
            <summary>
            Uses a collection retval for a given type.
            </summary>
            <param retval="collectionName">
            Name of the collection.
            </param>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.UseConnectionString(System.String)">
            <summary>
            Uses a connection string for a given type.
            </summary>
            <param retval="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.UseAsDiscriminator">
            <summary>
            Marks the type as discriminator for all its subtypes. 
            Alternative to the MongoDiscriminatorAttribute if it is not possible or wanted to put an attribute on the types.
            </summary>
        </member>
        <member name="T:Norm.Configuration.ConfigurationContainer">
            <summary>
            Mongo configuration container
            </summary>
        </member>
        <member name="T:Norm.Configuration.IConfigurationContainer">
            <summary>
            Defines access for configuration containers
            </summary>
        </member>
        <member name="M:Norm.Configuration.IConfigurationContainer.AddMap``1">
            <summary>
            Registers a mongo type map implicitly.
            </summary>
            <typeparam retval="T">Type to configure
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.IConfigurationContainer.GetConfigurationMap">
            <summary>
            Gets the configuration map.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Configuration.ConfigurationContainer.AddMap``1">
            <summary>
            Registers a Mongo Configuration Map by calling the default 
            constructor of T (so that's where you should add your mapping logic)
            </summary>
            <remarks>
            BY CONVENTION, the default constructor of T should register the mappings that are relevant.
            </remarks>
            <typeparam retval="T">
            The type of the map that should be added.
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.ConfigurationContainer.GetConfigurationMap">
            <summary>
            Gets the configuration map.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Norm.Commands.Qualifiers.SliceQualifier">
            <summary>
            A command that can be used as request.
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.InQualifier`1">
            <summary>
            The in qualifier.
            </summary>
            <typeparam retval="T">In type to qualify</typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.InQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.InQualifier`1"/> class.
            </summary>
            <param retval="inset">
            The inset.
            </param>
        </member>
        <member name="T:Norm.Collections.HiLoIdGenerator">
            <summary>
            Class that generates a new identity value using the HILO algorithm.
            Only one instance of this class should be used in your project
            </summary>
        </member>
        <member name="M:Norm.Collections.HiLoIdGenerator.GenerateId(System.String,Norm.IMongoDatabase)">
            <summary>
            Generates a new identity value
            </summary>
            <param name="collectionName">Collection Name</param>
            <returns></returns>
        </member>
        <member name="T:Norm.ObjectIdTypeConverter">
            <summary>
            Type Converter for <see cref="T:Norm.ObjectId"/>.
            </summary>
            <remarks>
            Currently supports conversion of a String to ObjectId
            </remarks>
        </member>
        <member name="M:Norm.ObjectIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param retval="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param retval="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Norm.ObjectIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param retval="context">The context.</param>
            <param retval="culture">The culture.</param>
            <param retval="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DataException">
            <summary>
            Data异常
            </summary>
        </member>
        <member name="M:MySoft.Data.DataException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:MySoft.Data.IncludeField">
            <summary>
            用于被选择的Field
            </summary>
        </member>
        <member name="M:MySoft.Data.IncludeField.#ctor(MySoft.Data.Field[])">
            <summary>
            实例化被选择的Field
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.IncludeField.GetFields(MySoft.Data.Field[])">
            <summary>
            获取字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.AllField`1">
            <summary>
            所有字段（特殊字段）
            </summary>
        </member>
        <member name="T:MySoft.Data.AllField">
            <summary>
            所有字段（特殊字段）
            </summary>
        </member>
        <member name="M:MySoft.Data.AllField.#ctor">
            <summary>
            All实例化
            </summary>
        </member>
        <member name="M:MySoft.Data.AllField.Exclude(MySoft.Data.Field[])">
            <summary>
            选择被排除的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.AllField.Include(MySoft.Data.Field[])">
            <summary>
            选择被选择的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.AllField.Item(System.String)">
            <summary>
            从实体中获取属性转换成Field
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.AllField`1.#ctor">
            <summary>
            All实例化
            </summary>
        </member>
        <member name="P:MySoft.Data.AllField`1.Item(System.String)">
            <summary>
            通过属性返回字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.ServerStatusResponse">
            <summary>
            The server status response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Uptime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.localTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.GlobalLock">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Mem">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Connections">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Extrainfo">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.IndexCounters">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.BackgroundFlushing">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.OpCounters">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Asserts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.GlobalLockResponse">
            <summary>
            The global lock response.
            </summary>    
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.TotalTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.LockTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.Ratio">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.MemoryResponse">
            <summary>
            The memory response.
            </summary>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Resident">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Virtual">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Mapped">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Supported">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Bits">
            <summary>
            The bit-ness of the server.
            </summary>
        </member>
        <member name="T:Norm.Responses.ConnectionsResponse">
            <summary>
            The connections response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ConnectionsResponse.Current">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ConnectionsResponse.Available">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ExtraInfoResponse">
            <summary>
            The extra info response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ExtraInfoResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.IndexCountersResponse">
            <summary>
            The index counters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.IndexCountersResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.BackgroundFlushingResponse">
            <summary>
            The background flushing response.
            </summary>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.Flushes">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.TotalMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.AverageMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.LastMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.LastFinished">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.OpCountersResponse">
            <summary>
            The opcounters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Insertions">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Queries">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Updates">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Deletions">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Pages">
            <summary>How many times a query had to re-query the server for the total resultant set.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Commands">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.AssertsResponse">
            <summary>
            The opcounters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Regular">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Warning">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Msg">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.User">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Rollovers">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ProfilingInformationResponse">
            <summary>
            The profiling information response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Ts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Info">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Millis">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ProfileLevelResponse">
            <summary>
            The profile level response.
            </summary>
        </member>
        <member name="M:Norm.Responses.ProfileLevelResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ProfileLevelResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ProfileLevelResponse.PreviousLevel">
            <summary>
            Gets or sets the previous profiling level.
            </summary>
            <value>The previous level.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.GetMoreMessage`1">
            <summary>Get more message.</summary>
            <typeparam retval="T">Type to get</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.GetMoreMessage`1.#ctor(Norm.IConnection,System.String,System.Int64,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.GetMoreMessage`1"/> class.</summary>
            <param retval="connection">The connection.</param>
            <param retval="fullyQualifiedCollectionName">The fully qualified collection retval.</param>
            <param retval="cursorID">The cursor id.</param>
            <param retval="limit"></param>
        </member>
        <member name="M:Norm.Protocol.Messages.GetMoreMessage`1.Execute">
            <summary>attempt to get more results.</summary>        
        </member>
        <member name="T:Norm.MongoAdmin">
            <summary>
            This class is used to connect to the MongoDB server and send special Administrative commands to it.
            </summary>
        </member>
        <member name="T:Norm.IMongoAdmin">
            <summary>
            <see cref="T:Norm.MongoAdmin"/>
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoAdmin"/> class.
            </summary>
            <param retval="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Norm.MongoAdmin.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.DropDatabase">
            <summary>
            Drop the admin database?
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetCurrentOperations">
            <summary>
            Yields a list of information about what processes are currently running on MongoDB.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.ResetLastError">
            <summary>
            Clear the last error on the server.
            </summary>
            <returns>
            The reset last error.
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.PreviousErrors">
            <summary>
            Get the previous error from the server.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.AssertionInfo">
            <summary>
            The assertion info.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.ServerStatus">
            <summary>
            Get information about the condition of the server.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.SetProfileLevel(System.Int32)">
            <summary>
            Set the profiling currently defined for the server, default is 1.
            </summary>
            <param retval="value">The value.</param>
            <returns>The set profile level.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.SetProfileLevel(System.Int32,System.Int32@)">
            <summary>
            Set the profiling currently defined for the server, default is 1.
            </summary>
            <param retval="value">The value.</param>
            <returns>The set profile level.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetProfileLevel">
            <summary>
            Find out the profile level on the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.RepairDatabase(System.Boolean,System.Boolean)">
            <summary>
            Ask the server to do a consistency check/repair on the database.
            </summary>
            <param retval="preserveClonedFilesOnFailure">if set to <c>true</c> [preserve cloned files on failure].</param>
            <param retval="backupOriginalFiles">if set to <c>true</c> [backup original files].</param>
            <returns>The repair database.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.KillOperation(System.Double)">
            <summary>
            Request that the server stops executing a currently running process.
            </summary>
            <param retval="operationId">The operation id.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetAllDatabases">
            <summary>
            What databases are available on the server?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.ForceSync(System.Boolean)">
            <summary>
            Request that the server write any uncommitted writes to the filesystem.
            </summary>
            <param retval="async">if set to <c>true</c> [async].</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.BuildInfo">
            <summary>
            The information about this MongoDB, when and how it was built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.AssertConnectedToAdmin">
            <summary>
            Verify that we're in admin.
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param retval="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Norm.MongoAdmin.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Norm.MongoAdmin"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Norm.MongoAdmin.Database">
            <summary>
            Gets Database.
            </summary>
        </member>
        <member name="T:Norm.TimedLock">
            <summary>
            Thanks to Eric Gunnerson and Phil Haack
            </summary>
        </member>
        <member name="M:Norm.TimedLock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.TimedLock"/> struct.
            </summary>
            <param retval="o">
            The object to lock.
            </param>
        </member>
        <member name="M:Norm.TimedLock.Lock(System.Object)">
            <summary>
            Lock an object.
            </summary>
            <param retval="o">The object to lock.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            The object to lock.
            </summary>
            <param retval="o">The object to lock.</param>
            <param retval="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:Norm.LockTimeoutException">
            </exception>
        </member>
        <member name="M:Norm.TimedLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Norm.TimedLock.Sentinel">
            <summary>
            The sentinel.
            </summary>
        </member>
        <member name="F:Norm.TimedLock.Sentinel.StackTraces">
            <summary>
            The stack traces.
            </summary>
        </member>
        <member name="M:Norm.TimedLock.Sentinel.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Norm.TimedLock.Sentinel"/> class. 
            </summary>
        </member>
        <member name="T:Norm.LockTimeoutException">
            <summary>
            Thrown when a lock times out.
            </summary>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param retval="message">
            The message.
            </param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param retval="message">
            The message.
            </param>
            <param retval="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param retval="blockingStackTrace">The blocking stack trace.</param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param retval="info">The info.</param>
            <param retval="context">The context.</param>
        </member>
        <member name="P:Norm.LockTimeoutException.BlockingStackTrace">
            <summary>
            Gets BlockingStackTrace.
            </summary>
        </member>
        <member name="T:Norm.Configuration.ITypeConfiguration`1">
            <summary>
            Type-specific type configuration
            </summary>
            <typeparam retval="T">
            The ype to configure
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Looks up property names for use with aliases.
            </summary>
            <param retval="sourcePropery">The source propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration`1.IdIs(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies the Id property for entities that don't have conventional Id's and can't be changed.
            </summary>
            <param retval="idProperty">The unconventional Id propery.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Commands.Qualifiers.NotInQualifier`1">
            <summary>
            The not in qualifier.
            </summary>
            <typeparam retval="T">No in type to qualify </typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.NotInQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.NotInQualifier`1"/> class.
            </summary>
            <param retval="notInSet">
            The not in set.
            </param>
        </member>
        <member name="T:Norm.OrderBy">
            <summary>
            Values that can be used to define order direction.
            </summary>
            <remarks>
            This is in the Norm namespace because it makes for "easy access"
            </remarks>
        </member>
        <member name="F:Norm.OrderBy.Ascending">
            <summary>
            Order Ascending
            </summary>
        </member>
        <member name="F:Norm.OrderBy.Descending">
            <summary>
            Order Descending
            </summary>
        </member>
        <member name="T:Norm.Commands.Modifiers.PopOperation">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PopOperation.#ctor(Norm.Commands.Modifiers.PopType)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Commands.Modifiers.PopType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Commands.Modifiers.PopType.RemoveFirst">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Commands.Modifiers.PopType.RemoveLast">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:MySoft.Data.ProcSection">
            <summary>
            存储过程操作实现类
            </summary>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            增加多个参数到当前Proc命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(MySoft.Data.SQLParameter[])">
            <summary>
            增加多个参数到当前Proc命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddOutputParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            增加一个输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddOutputParameter(System.String,System.Data.DbType)">
            <summary>
            增加一个输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddReturnValueParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            增加一个返回参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddReturnValueParameter(System.String,System.Data.DbType)">
            <summary>
            增加一个返回参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.Execute">
            <summary>
            执行当前Proc
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToSingle``1">
            <summary>
            执行当前Proc并返回一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToList``1">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToListResult``1">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToReader">
            <summary>
            执行当前Proc并返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToTable">
            <summary>
            执行当前Proc并返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToDataSet">
            <summary>
            执行当前Sql命令并返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar">
            <summary>
            执行当前Proc并返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar``1">
            <summary>
            执行当前Proc并返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.Execute(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToSingle``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个实体,并输出参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToList``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个列表,并输出参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToListResult``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToReader(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DbReader,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToTable(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DataTable,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToDataSet(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DataSet,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个值,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个值,并输出参数值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ProcSection.ReturnValue">
            <summary>
            获取返回值
            </summary>
        </member>
        <member name="T:MySoft.Data.WhereClip">
            <summary>
            条件构造器
            </summary>
        </member>
        <member name="F:MySoft.Data.WhereClip.None">
            <summary>
            默认的无条件对象
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor">
            <summary>
            自定义一个Where条件
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            自定义一个Where条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            自定义一个Where条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_True(MySoft.Data.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_False(MySoft.Data.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_LogicalNot(MySoft.Data.WhereClip)">
            <summary>
            非
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_BitwiseAnd(MySoft.Data.WhereClip,MySoft.Data.WhereClip)">
            <summary>
            与
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_BitwiseOr(MySoft.Data.WhereClip,MySoft.Data.WhereClip)">
            <summary>
            或者
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.WhereClip.Value">
            <summary>
            Where的值
            </summary>
        </member>
        <member name="P:MySoft.Data.WhereClip.Parameters">
            <summary>
            返回参数列表
            </summary>
        </member>
        <member name="T:MySoft.Data.SqlServer9.SqlServer9Provider">
            <summary>
            SQL Server 2005 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlServer9.SqlServer9Provider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <param name="query"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.SetProfileResponse">
            <summary>
            The set profile response.
            </summary>
        </member>
        <member name="P:Norm.Responses.SetProfileResponse.Profile">
            <summary>
            The profile.
            </summary>
            <value>The Profile property gets/sets the Profile data member.</value>
        </member>
        <member name="P:Norm.Responses.SetProfileResponse.SlowOpThreshold">
            <summary>
            The threshold of "slowness" at which profile level 1 will record info queries.
            </summary>
        </member>
        <member name="P:Norm.Responses.SetProfileResponse.PreviousLevel">
            <summary>
            The previous level.
            </summary>
            <value>The PreviousLevel property gets the PreviousLevel data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest">
            <summary>
            The drop database request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest.DropDatabase">
            <summary>
            Drop database.
            </summary>
            <value>The DropDatabase property gets the DropDatabase data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest">
            <summary>
            The collection statistics request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest.CollectionStatistics">
            <summary>
            Gets or sets the collection statistics.
            </summary>
            <value>The User property gets/sets the User data member.</value>
            <value>The CollectionStatistics property gets/sets the CollectionStatistics data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.ReplyMessage`1">
            <summary>
            The reply message.
            </summary>
            <typeparam retval="T">
            </typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.ReplyMessage`1.#ctor(Norm.IConnection,System.String,System.IO.BinaryReader,Norm.Protocol.MongoOp,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.ReplyMessage`1"/> class.
            Processes a response stream.
            </summary>
            <param retval="connection">The connection.</param>
            <param retval="fullyQualifiedCollestionName">The fully Qualified Collestion Name.</param>
            <param retval="reply">The reply.</param>
            <param retval="originalOperation"></param>
            <param retval="limit"></param>
        </member>
        <member name="M:Norm.Protocol.Messages.ReplyMessage`1.Dispose">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.CursorID">
            <summary>
            The cursor to be used in future calls to "get more"
            </summary>
            <value>The CursorID property gets/sets the CursorID data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.CursorPosition">
            <summary>
            The location of the cursor.
            </summary>
            <value>The CursorPosition property gets/sets the CursorPosition data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.HasError">
            <summary>
            If "HasError" is set, 
            </summary>
            <value>The HasError property gets/sets the HasError data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.Results">
            <summary>
            An enumerable result set.
            </summary>
            <value>The Results property gets the Results data member.</value>
        </member>
        <member name="T:Norm.Linq.MongoQueryProvider">
            <summary>
            The mongo query provider.
            </summary>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. create query.
            </summary>
            <typeparam retval="S">Type of query to create</typeparam>
            <param retval="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. create query.
            </summary>
            <param retval="expression">The expression.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. execute.
            </summary>
            <typeparam retval="S">Type to execute</typeparam>
            <param retval="expression">The expression.</param>
            <returns>Resulting object</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. execute.
            </summary>
            <param retval="expression">The expression.</param>
            <returns>The i query provider. execute.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.ExecuteQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the Linq expression
            </summary>
            <param retval="expression">An expression tree that represents a LINQ query.</param>
            <returns>The execute.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the Linq expression
            </summary>
            <param retval="expression">An expression tree that represents a LINQ query.</param>
            <returns>The execute.</returns>
        </member>
        <member name="P:Norm.Linq.MongoQueryProvider.DB">
            <summary>
            Gets the DB.
            </summary>
        </member>
        <member name="T:Norm.Linq.LinqExtensions">
            <summary>
            Linq extensions.
            </summary>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.GetConstantValue``1(System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value.
            </summary>
            <param retval="exp">The exp.</param>
            <returns>The get constant value.</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.Explain``1(System.Linq.IQueryable{``0})">
            <summary>
            Asks Mongo for an explain plan for a linq query.
            </summary>
            <typeparam retval="T">Type to explain</typeparam>
            <param retval="expression">The expression.</param>
            <remarks>ATT: I *do not* like this, I would like to see this refactored to not do an explicit cast.</remarks>
            <returns>Query explain plan</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.Hint``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Norm.Protocol.Messages.IndexOption)">
            <summary>
            Adds a query hint.
            </summary>
            <typeparam retval="T">Document type</typeparam>
            <param retval="find">The type of document being enumerated.</param>
            <param retval="hint">The query hint expression.</param>
            <param retval="direction">Ascending or descending.</param>
            <remarks>ATT: I *do not* like this, I would like to see this refactored to not do an explicit cast.</remarks>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.EscapeJavaScriptString(System.String)">
            <summary>
            Escapes the double quotes.
            </summary>
            <param retval="str">The string</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.AsExpando(Norm.BSON.QualifierCommand)">
            <summary>
            Converts a QualifierCommand into an Expando object
            </summary>
            <param retval="qualifier"></param>
            <returns>Qualifer Command as Expando object</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.GetPropertyAlias(System.Linq.Expressions.MemberExpression)">
            <summary>
            Returns the fully qualified and mapped retval from the member expression.
            </summary>
            <param retval="mex"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Configuration.MongoTypeConfiguration`1">
            <summary>
            Mongo configuration for a specific type
            </summary>
            <typeparam retval="T">
            Type under configuratino
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Looks up property names for use with aliases.
            </summary>
            <param retval="sourcePropery">The source propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.IdIs(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines a property as and entity's Id explicitly.
            </summary>
            <param retval="idProperty">The Id propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.UseCollectionNamed(System.String)">
            <summary>
            Uses a retval collection for a given type.
            </summary>
            <param retval="connectionStrings">The connection strings.</param>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.UseConnectionString(System.String)">
            <summary>
            Uses a connection string for a given type.
            </summary>
            <param retval="connectionString">The connection string.</param>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.UseAsDiscriminator">
            <summary>
            Marks the type as discriminator for all its subtypes. 
            Alternative to the MongoDiscriminatorAttribute if it is not possible or wanted to put an attribute on the types.
            </summary>
        </member>
        <member name="T:Norm.Collections.MongoCollection">
            <summary>
            The mongo collection.
            </summary>
        </member>
        <member name="T:Norm.Collections.MongoCollection`1">
            <summary>
            Mongo typed collection.
            </summary>
            <remarks>
            This class is not (and will probably not become) thread-safe.
            </remarks>
            <typeparam retval="T">Collection type</typeparam>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._updateable">
            <summary>
            This will have a different instance for each concrete version of <see cref="T:Norm.Collections.MongoCollection`1"/>
            </summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._collectionName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._connection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._db">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.#ctor(System.String,Norm.IMongoDatabase,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.MongoCollection`1"/> class.
            Represents a strongly-typed set of documents in the db.
            </summary>
            <param retval="collectionName">The collection Name.</param>
            <param retval="db">The db.</param>
            <param retval="connection">The connection.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.AsQueryable">
            <summary>
            This is the LINQ Hook, call me and you'll be querying MongoDB via LINQ. w00t!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Save(`0)">
            <summary>
            Attempts to save or update an instance
            </summary>
            <param retval="entity">The entity.</param>
            <remarks>
            Only works when the Id property is of type ObjectId
            </remarks>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.GetChildCollection``1(System.String)">
            <summary>
            Get a child collection of the specified type.
            </summary>
            <typeparam retval="U">Type of collection</typeparam>
            <param retval="collectionName">The collection Name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Update``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            The update.
            </summary>
            <typeparam retval="X">Document to match</typeparam>
            <typeparam retval="U">Value document</typeparam>
            <param retval="matchDocument">The match document.</param>
            <param retval="valueDocument">The value document.</param>
            <param retval="updateMultiple">The update multiple.</param>
            <param retval="upsert">The upsert.</param>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.DeleteIndex(System.String,System.Int32@)">
            <summary>
            Deletes the specified index for the collection.
            </summary>
            <param retval="indexName">
            </param>
            <param retval="numberDeleted">
            </param>
            <returns>
            The delete index.
            </returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.FindOne``1(``0)">
            <summary>
            This will do a search on the collection using the specified template.
            If no documents are found, default(T) will be returned.
            </summary>
            <typeparam retval="U">A type that has each member set to the value to search.
            Keep in mind that all the properties must either be concrete values, or the
            special "Qualifier"-type values.</typeparam>
            <param retval="template">The template.</param>
            <returns>
            The first document that matched the template, or default(T)
            </returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.GetCollectionStatistics">
            <summary>
            The get collection statistics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.CreateIndex(Norm.BSON.Expando,System.String,System.Boolean)">
            <summary>
            Asynchronously creates an index on this collection.
            It is highly recommended that you use the overload of this method that accepts an expression unless you need the granularity that this method provides.
            </summary>
            <param retval="fieldSelectionExpando">The document properties that participate in this index. Each property of "fieldSelectionExpando" should be 
            set to either "IndexOption.Ascending" or "IndexOption.Descending", the properties can be deep aliases, like "Suppiler.Name",
            but remember that this will make no effort to check that what you put in for values match the MongoConfiguration.</param>
            <param retval="indexName">The retval of the index as it should appear in the special "system.indexes" child collection.</param>
            <param retval="isUnique">True if MongoDB can expect that each document will have a unique combination for this fieldSelectionExpando. 
            MongoDB will potentially optimize the index based on this being true.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Distinct``1(System.String)">
            <summary>
            Gets the distinct values for the specified fieldSelectionExpando.
            </summary>
            <typeparam retval="U">You better know that every value that could come back
            is of this type, or BAD THINGS will happen.</typeparam>
            <param retval="keyName">Name of the fieldSelectionExpando.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Delete``1(``0)">
            <summary>
            Delete the documents that mact the specified template.
            </summary>
            <typeparam retval="U">a document that has properties
            that match what you want to delete.</typeparam>
            <param retval="template">The template.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Delete(`0)">
            <summary>
            Deletes the specified document based on it's Id property.
            </summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``2(``0,``1,System.Int32,System.Int32,System.String)">
            <summary>
            Locates documents that match the template, in the order specified.
            </summary>
            <remarks>
            remember that "orderby" is the mongo notation where the following would sort by Name ascending,
            then by Date descending
            
            new {Name=1, Date-1}
            </remarks>
            <typeparam retval="U"></typeparam>
            <typeparam retval="S"></typeparam>
            <param retval="template">Passing null for this means it will be ignored.</param>
            <param retval="orderBy">Passing null for this means it will be ignored.</param>
            <param retval="limit">The maximum number of documents to return.</param>
            <param retval="skip">The number to skip before returning any.</param>
            <param retval="fullyQualifiedName">The collection from which to pull the documents.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.FindAndModify``3(``0,``1,``2)">
            <summary>
            This command can be used to atomically modify a document (at most one) and return it.
            </summary>
            <typeparam name="U"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="query">The document template used to find the document to find and modify</param>
            <param name="update">A modifier object</param>
            <param name="sort">If multiple docs match, choose the first one in the specified sort order as the object to manipulate</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.FindFieldSelection``3(``0,``1,System.Int32,System.Int32,System.String,System.Linq.Expressions.Expression{System.Func{`0,``2}})">
            <summary>
            Infrastructure, Used by Linq Provider
            </summary>
            <remarks>
            DO NOT change the name or signature of this method without also adjusting the LINQ Provider.
            </remarks>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Explain``1(``0)">
            <summary>
            Generates a query explain plan.
            </summary>
            <typeparam retval="U">The type of the template document (probably an anonymous type..</typeparam>
            <param retval="template">The template of the query to explain.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Count``1(``0)">
            <summary>
            A count using the specified filter.
            </summary>
            <typeparam retval="U">Document type</typeparam>
            <param retval="query">The query.</param>
            <returns>The count.</returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts documents
            </summary>
            <param retval="documentsToInsert">
            The documents to insert.
            </param>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``1(System.String,System.String)">
            <summary>
            Executes the MapReduce on this collection
            </summary>
            <typeparam retval="X">The return type</typeparam>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``2(``0,System.String,System.String)">
            <summary>
            Executes the map reduce with an applied template
            </summary>
            <typeparam retval="U">The type of the template</typeparam>
            <typeparam retval="X">The return type</typeparam>
            <param retval="template"></param>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``2(``0,System.String,System.String,System.String)">
            <summary>
            Executes the map reduce with an applied template and finalize
            </summary>
            <typeparam retval="U">The type of the template</typeparam>
            <typeparam retval="X">The return type</typeparam>
            <param retval="template">The template</param>
            <param retval="map"></param>
            <param retval="reduce"></param>
            <param retval="finalize"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``1(Norm.MapReduceOptions{`0})">
            <summary>
            Executes the map reduce with any options
            </summary>
            <typeparam retval="X">The return type</typeparam>
            <param retval="options">The options</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.TrySettingId(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Tries the setting id property.
            </summary>
            <param retval="entities">The entities.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.GenerateId">
            <summary>
            Generates a new identity value using the HiLo algorithm
            </summary>
            <returns>New identity value</returns>
        </member>
        <member name="P:Norm.Collections.MongoCollection`1.Updateable">
            <summary>
            True if the type of this collection can be updated 
            (i.e. the Type specifies "_id", "ID", or a property with the attributed "MongoIdentifier").
            </summary>
        </member>
        <member name="P:Norm.Collections.MongoCollection`1.FullyQualifiedName">
            <summary>
            The retval of this collection, including the database prefix.
            </summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection.#ctor(System.String,Norm.IMongoDatabase,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.MongoCollection"/> class.
            Represents a strongly-typed set of documents in the db.
            </summary>
            <param retval="collectionName">Name of the collection.</param>
            <param retval="db">The db.</param>
            <param retval="connection">The connection.</param>
        </member>
        <member name="T:Norm.ScopedCode`1">
            <summary>
            A class that represents code with scoping - will be serialized to
            </summary>
            <typeparam retval="T">Type of scoped code</typeparam>
        </member>
        <member name="T:Norm.ScopedCode">
            <summary>
            The scoped code.
            </summary>
        </member>
        <member name="P:Norm.ScopedCode.CodeString">
            <summary>
            The scope code.
            </summary>
        </member>
        <member name="P:Norm.ScopedCode.Scope">
            <summary>
            The scope for this code.
            </summary>
        </member>
        <member name="P:Norm.ScopedCode`1.Scope">
            <summary>
            The Scope this this code.
            </summary>
        </member>
        <member name="T:Norm.MongoIdentifierAttribute">
            <summary>
            Flags a property as a Mongo identifier (_id)
            </summary>
        </member>
        <member name="T:MySoft.Data.InsertCreator`1">
            <summary>
            插入创建器
            </summary>
        </member>
        <member name="T:MySoft.Data.InsertCreator">
            <summary>
            插入创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator(System.String)">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.#ctor(System.String)">
            <summary>
            实例化InsertCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化InsertCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.SetIdentityField(MySoft.Data.Field)">
            <summary>
            设置主键字段
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.SetIdentityField(System.String)">
            <summary>
            设置主键字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.String,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(MySoft.Data.Field[],System.Object[])">
            <summary>
            添加多个数据
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.String[],System.Object[])">
            <summary>
            添加多个数据
            </summary>
            <param name="fieldNames"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.RemoveInsert(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.RemoveInsert(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.InsertCreator.IdentityField">
            <summary>
            返回标识列字段
            </summary>
        </member>
        <member name="P:MySoft.Data.InsertCreator.SequenceName">
            <summary>
            返回自增量名称
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator`1.NewCreator">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator`1.Set(`0)">
            <summary>
            设置实体信息
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.GenericCommandResponse">
            <summary>
            The generic command response.
            </summary>
        </member>
        <member name="M:Norm.Responses.GenericCommandResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.GenericCommandResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.GenericCommandResponse.Info">
            <summary>
            Gets the command info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Norm.Responses.DroppedDatabaseResponse">
            <summary>
            The dropped database response.
            </summary>
        </member>
        <member name="P:Norm.Responses.DroppedDatabaseResponse.Dropped">
            <summary>
            Gets or sets the dropped database.
            </summary>
            <value>The dropped.</value>
        </member>
        <member name="T:Norm.Responses.BuildInfoResponse">
            <summary>
            The build info response.
            </summary>
        </member>
        <member name="M:Norm.Responses.BuildInfoResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.BuildInfoResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.Version">
            <summary>
            The version.
            </summary>
            <value>The Version property gets the Version data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.GitVersion">
            <summary>
            The git version.
            </summary>
            <value>The GitVersion property gets the GitVersion data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.SystemInformation">
            <summary>
            The sys info.
            </summary>
            <value>The SystemInformation property gets the SystemInformation data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.Bits">
            <summary>The number of bits for the current build (32 or 64).</summary>
            <value>The Bits property gets the Bits data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest">
            <summary>
            The create collection request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest"/> class.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.#ctor(Norm.Collections.CreateCollectionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest"/> class.
            </summary>
            <param retval="options">The options.</param>        
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Create">
            <summary>
            Gets options retval.
            </summary>
            <value>The Create property gets the Create data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Size">
            <summary>
            The size of the collection.
            </summary>
            <value>The Size property gets the Size data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The Max property gets the Max data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Capped">
            <summary>
            A value indicating if the collection is capped.
            </summary>
            <value>The Capped property gets the Capped data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.AutoIndexId">
            <summary>
            A value indicating the autoIndexId.
            </summary>
            <value>The AutoIndexId property gets the AutoIndexId data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest">
            <summary>
            The authentication request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Authenticate">
            <summary>
            Authenticate.
            </summary>
            <value>The Authenticate property gets the Authenticate data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Nonce">
            <summary>
            The nonce.
            </summary>
            <value>The Nonce property gets/sets the Nonce data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.User">
            <summary>
            The user.
            </summary>
            <value>The User property gets/sets the User data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Key">
            <summary>
            The fieldSelectionExpando.
            </summary>
            <value>The Key property gets/sets the Key data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.FindAndModifyResult`1.Value">
            <summary>
            The result of the find and modify.
            </summary>
        </member>
        <member name="T:Norm.Protocol.Messages.DeleteMessage`1">
            <summary>
            The delete message.
            </summary>
            <typeparam retval="U">Type to delete </typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.DeleteMessage`1.#ctor(Norm.IConnection,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.DeleteMessage`1"/> class.
            Delete some docs from the database.
            </summary>
            <param retval="connection">The connection.</param>
            <param retval="collection">The collection.</param>
            <param retval="templateDocument">The template Document.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.DeleteMessage`1.Execute">
            <summary>
            Execute a delete
            </summary>
        </member>
        <member name="T:Norm.MapReduce">
            <summary>
            Map reduce.
            </summary>
        </member>
        <member name="M:Norm.MapReduce.#ctor(Norm.IMongoDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduce"/> class.
            </summary>
            <param retval="database">
            The database.
            </param>
            <remarks>
            Removed IDisposable form MapReduce. We do not need to delete the temporary collections 
            (and it was causing errors). These are deleted by Mongo when the connection is terminated. 
            http://groups.google.com/group/mongodb-user/browse_thread/thread/5b068bd40847950d/8de9428e132e8b68?lnk=raot
            </remarks>
        </member>
        <member name="M:Norm.MapReduce.Execute(Norm.MapReduceOptions)">
            <summary>
            Execute.
            </summary>
            <param retval="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.ConnectionStringBuilder">
            <summary>
            The connection string builder.
            </summary>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Norm.ConnectionStringBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.Create(System.String)">
            <summary>
            Creates a connection string builder.
            </summary>
            <param retval="connectionString">The connection string.</param>
            <returns></returns>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetQueryTimeout(System.Int32)">
            <summary>
            Set the query timeout.
            </summary>
            <param retval="timeout">
            The timeout.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetWriteCount(System.Int32)">
            <summary>
            Sets the number of servers that writes must be written to before writes return when in strict mode.
            </summary>
            <param name="writeCount"></param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetStrictMode(System.Boolean)">
            <summary>
            Sets strict mode.
            </summary>
            <param retval="strict">
            The strict.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetPoolSize(System.Int32)">
            <summary>
            Set the pool size.
            </summary>
            <param retval="size">
            The size.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled flag.
            </summary>
            <param retval="pooled">
            The pooled.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param retval="timeout">
            The timeout.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetLifetime(System.Int32)">
            <summary>
            Sets the lifetime.
            </summary>
            <param retval="lifetime">
            The lifetime.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildOptions(Norm.IOptionsContainer,System.String)">
            <summary>
            The build options.
            </summary>
            <param retval="container">The container.</param>
            <param retval="options">The options.</param>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildAuthentication(System.Text.StringBuilder)">
            <summary>
            The build authentication.
            </summary>
            <param retval="sb">The string builder.</param>
            <returns></returns>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildDatabase(System.Text.StringBuilder)">
            <summary>
            Builds a database.
            </summary>
            <param retval="sb">The sb.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildServerList(System.Text.StringBuilder)">
            <summary>
            The build server list.
            </summary>
            <param retval="sb">The sb.</param>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Servers">
            <summary>
            Gets a server list.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.UserName">
            <summary>
            Gets the user retval.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Database">
            <summary>
            Gets database retval.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.StrictMode">
            <summary>
            Gets a value indicating whether strict mode is enabled.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Pooled">
            <summary>
            Gets a value indicating whether connections are pooled.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.PoolSize">
            <summary>
            Gets the connection pool size.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Timeout">
            <summary>
            Gets the connection timeout.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Lifetime">
            <summary>
            Gets the connection lifetime.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.VerifyWriteCount">
            <summary>
            Get the write count required to be returned from the server when strict mode is enabled.
            </summary>
        </member>
        <member name="T:Norm.BSON.ReflectionHelper">
            <summary>
            Convenience methods for type reflection.
            </summary>
            <remarks>
            This was formerly "Norm.BSON.TypeHelper" but the name was in conflict with a BCL type, so it has been changed to "ReflectionHelper"
            </remarks>
        </member>
        <member name="F:Norm.BSON.ReflectionHelper._rxGenericTypeNameFinder">
            <summary>
            A regex that gets everything up tot the first backtick, useful when searching for a good starting name.
            </summary>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.GetScrubbedGenericName(System.Type)">
            <summary>
            Given a type, this will produce a mongodb save version of the name, for example:
            
            Product&lt;UKSupplier&gt; will become "Product_UKSupplier" - this is helpful for generic typed collections.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.GetProperties(System.Type)">
            <summary>
            Returns the PropertyInfo for properties defined as Instance, Public, NonPublic, or FlattenHierarchy
            </summary>
            <param retval="type">The type.</param>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.ReflectionHelper"/> class.
            </summary>
            <param retval="type">The type.</param>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.GetHelperForType(System.Type)">
            <summary>
            The get helper for type.
            </summary>
            <param retval="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.FindProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Lifted from AutoMaper.  Finds a property using a lambda expression
            (i.e. x => x.Name)
            </summary>
            <param retval="lambdaExpression">The lambda expression.</param>
            <returns>Property retval</returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.FindProperty(System.Type,System.String)">
            <summary>
            Finds a property.
            </summary>
            <param retval="type">The type.</param>
            <param retval="retval">The retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.GetProperties">
            <summary>
            Gets all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.FindProperty(System.String)">
            <summary>
            Returns the magic property for the specified retval, or null if it doesn't exist.
            </summary>
            <param retval="retval">The retval.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.FindIdProperty">
            <summary>
            Finds the id property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.FindIdProperty(System.Type)">
            <summary>
             Returns the property defined as the Id for the entity either by convention or explicitly. 
            </summary>
            <param retval="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.LoadMagicProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Reflection.PropertyInfo)">
            <summary>
            Loads magic properties.
            </summary>
            <param retval="properties">The properties.</param>
            <param retval="idProperty">The id property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.GetTypeDiscriminator">
            <summary>
            Determines the discriminator to use when serialising the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.ReflectionHelper.ApplyDefaultValues(System.Object)">
            <summary>
            Apply default values to the properties in the instance
            </summary>
            <param retval="typeHelper"></param>
            <param retval="instance"></param>
        </member>
        <member name="P:Norm.BSON.ReflectionHelper.IsExpando">
            <summary>
            indicates if this type implements "IExpando"
            </summary>
        </member>
        <member name="T:MySoft.Data.Table`1">
            <summary>
            表信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.Table">
            <summary>
            数据库查询时用户传入的自定义信息表
            </summary>
        </member>
        <member name="M:MySoft.Data.Table.#ctor(System.String)">
            <summary>
            实例化一个表
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.Table.As(System.String)">
            <summary>
            指定表别名
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1(``0)">
            <summary>
            返回一个Table实例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1">
            <summary>
            返回一个Table实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1(System.String)">
            <summary>
            返回一个Table实例
            </summary>
            <param name="suffix">后缀名称</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1(System.String,System.String)">
            <summary>
            返回一个Table实例
            </summary>
            <param name="prefix">前缀名称</param>
            <param name="suffix">后缀名称</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.From``1">
            <summary>
            返回一个表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.From``1(System.String)">
            <summary>
            返回一个表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.From``1(MySoft.Data.Table)">
            <summary>
            返回一个表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Table.Item(System.String)">
            <summary>
            返回一个Field
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Table.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.Name">
            <summary>
            设置表名
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.Prefix">
            <summary>
            设置表前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.Suffix">
            <summary>
            设置表后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.OriginalName">
            <summary>
            获取原始的表名
            </summary>
        </member>
        <member name="M:MySoft.Data.Table`1.#ctor(System.String)">
            <summary>
            实例化一个表
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:MySoft.Data.OrderByClipBuilder">
            <summary>
            OrderByClip构建类
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClipBuilder.#ctor">
            <summary>
            实例化OrderByClipBuilder
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClipBuilder.#ctor(MySoft.Data.OrderByClip[])">
            <summary>
            实例化OrderByClipBuilder
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="M:MySoft.Data.OrderByClipBuilder.Add(MySoft.Data.OrderByClip)">
            <summary>
            增加一个排序
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="M:MySoft.Data.OrderByClipBuilder.Add(MySoft.Data.Field,System.Boolean)">
            <summary>
            增加一个排序
            </summary>
            <param name="field"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.OrderByClipBuilder.Add(System.Boolean,MySoft.Data.Field[])">
            <summary>
            增加一组排序
            </summary>
            <param name="desc"></param>
            <param name="fields"></param>
        </member>
        <member name="P:MySoft.Data.OrderByClipBuilder.OrderByClip">
            <summary>
            返回排序
            </summary>
        </member>
        <member name="T:MySoft.Data.FieldValueCollection`1">
            <summary>
            FieldValue集合
            </summary>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实例化FieldValueCollection
            </summary>
            <param name="dictValues"></param>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.#ctor(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            实例化FieldValueCollection
            </summary>
            <param name="dictValues"></param>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.ToList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.FieldValue">
            <summary>
            字段及值
            </summary>
        </member>
        <member name="M:MySoft.Data.FieldValue.#ctor(MySoft.Data.Field,System.Object)">
            <summary>
            实例化FieldValue
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.Data.FieldValue.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsIdentity">
            <summary>
            是否标识列
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsChanged">
            <summary>
            是否更改
            </summary>
        </member>
        <member name="T:MySoft.Data.DataHelper">
            <summary>
            数据服务类
            </summary>
        </member>
        <member name="M:MySoft.Data.DataHelper.ConvertType``2(``0)">
            <summary>
            从对象obj中获取值传给当前实体,TOutput必须为class或接口
            TInput可以为class、NameValueCollection、IDictionary、IRowReader、DataRow
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.WhereClip)">
            <summary>
            判断WhereClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.OrderByClip)">
            <summary>
            判断OrderByClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.GroupByClip)">
            <summary>
            判断GroupByClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.FormatValue(System.Object)">
            <summary>
            格式化数据为数据库通用格式
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.CreateFieldValue(MySoft.Data.Field[],System.Object[],System.Boolean)">
            <summary>
            创建一个FieldValue列表
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.GetCommandLog(System.Data.Common.DbCommand)">
            <summary>
            获取输出的日志
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.ValidateCollectionResponse">
            <summary>
            The validate collection response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Ns">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Result">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Valid">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.LastExtentSize">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.Messages.IndexOption">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="F:Norm.Protocol.Messages.IndexOption.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="F:Norm.Protocol.Messages.IndexOption.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfiguration">
            <summary>
            This is a singleton with which all property maps should be registered.
            </summary>
            <remarks>
            The BSON Serializer and LINQ-to-Mongo both use this in order to correctly map the property
            retval on the POCO to its correspondent field retval in the database.
            
            This is slightly thread-scary.
            </remarks>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.RemoveMapFor``1">
            <summary>
            Kill a map for the specified type.
            </summary>
            <remarks>This is here for unit testing support, use at your own risk.</remarks>
            <typeparam retval="T"></typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.RemoveTypeConverterFor``1">
            <summary>
            Remove a type converter for the specified type.
            </summary>
            <remarks>This is here for unit testing support, use at your own risk.</remarks>
            <typeparam name="TClr"></typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.FireTypeChangedEvent(System.Type)">
            <summary>
            Allows various objects to fire type change event.
            </summary>
            <param retval="t"></param>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.Initialize(System.Action{Norm.Configuration.IConfigurationContainer})">
            <summary>
            Given this singleton IConfigurationContainer, add a fluently-defined map.
            </summary>
            <param retval="action">The action.</param>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Given the type, and the property retval,
            get the alias as it has been defined by Initialization calls of "add"
            </summary>
            <param retval="type">The type.</param>
            <param retval="propertyName">Name of the property.</param>
            <returns>
            Property alias if one is configured; otherwise returns the input propertyName
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetCollectionName(System.Type)">
            <summary>
            Given the type, get the fluently configured collection type.
            </summary>
            <param retval="type">The type.</param>
            <returns>Type's Collection retval</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetConnectionString(System.Type)">
            <summary>
            Given a type, get the connection string defined for it.
            </summary>
            <remarks>
            ATT: Not sure this is needed, should potentially be removed if possible.
            </remarks>
            <param retval="type">The type for whicht to get the connection string.</param>
            <returns>
            The type's connection string if configured; otherwise null.
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetTypeDiscriminator(System.Type)">
            <summary>
            Given a type, get fluently configured discriminator type string
            </summary>
            <param retval="type">The type for whicht to get the discriminator type.</param>
            <returns>
            The type's discriminator type if configured; otherwise null.
            </returns>
        </member>
        <member name="P:Norm.Configuration.MongoConfiguration.ConfigurationContainer">
            <summary>
            Gets the configuration provider instance.
            </summary>
            <value>The configuration provider.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.ExistsQualifier">
            <summary>
            The exists quallifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.ExistsQualifier.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.ExistsQualifier"/> class.
            </summary>
            <param retval="doesExist">The does exist.</param>
        </member>
        <member name="T:Norm.BSON.BsonSerializer">
            <summary>
            The bson serializer.
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.BsonSerializer"/> class.
            </summary>
            <param retval="writer">
            The writer.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Serialize``1(``0)">
            <summary>
            Convert a document to it's BSON equivalent.
            </summary>
            <typeparam retval="T">Type to serialize</typeparam>
            <param retval="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.NewDocument">
            <summary>
            Write the peramble of the BSON document.
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.EndDocument(System.Boolean)">
            <summary>
            Write the document terminator, prepenf the original length.
            </summary>
            <param retval="includeEeo">if set to <c>true</c> include eeo.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Written(System.Int32)">
            <summary>
            increment the number of bytes written.
            </summary>
            <param retval="length">The length written.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteDocument(System.Object)">
            <summary>
            Writes a document.
            </summary>
            <param retval="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteFlyweight(Norm.BSON.Expando)">
            <summary>
            Writes a Flyweight.
            </summary>
            <param retval="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.IsDbReference(System.Type)">
            <summary>
            Checks to see if the object is a DbReference. If it is, we won't want to override $id to _id.
            </summary>
            <param retval="type">The type of the object being serialized.</param>
            <returns>True if the object is a DbReference, false otherwise.</returns>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteObject(System.Object)">
            <summary>
            Actually write the property bytes.
            </summary>
            <param retval="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.SerializeMember(System.String,System.Object)">
            <summary>
            Serializes a member.
            </summary>
            <param retval="retval">The retval.</param>
            <param retval="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.String,System.Object)">
            <summary>
            Writes a retval/value pair.
            </summary>
            <param retval="retval">The retval.</param>
            <param retval="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Collections.IEnumerable)">
            <summary>
            Writes an enumerable list.
            </summary>
            <param retval="enumerable">
            The enumerable.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Collections.IDictionary)">
            <summary>
            Writes a dictionary.
            </summary>
            <param retval="dictionary">
            The dictionary.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteBinary(System.Object)">
            <summary>
            Writes binnary.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(Norm.BSON.BSONTypes)">
            <summary>
            Writes a BSON type.
            </summary>
            <param retval="type">
            The type.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteName(System.String)">
            <summary>
            Writes a retval.
            </summary>
            <param retval="retval">
            The retval.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.String)">
            <summary>
            Writes a string retval.
            </summary>
            <param retval="retval">
            The retval.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Text.RegularExpressions.Regex)">
            <summary>
            Writes a regex.
            </summary>
            <param retval="regex">
            The regex.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(Norm.ScopedCode)">
            <summary>
            Writes scoped code.
            </summary>
            <param retval="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.Attributes.MongoIgnoreAttribute">
            <summary>
            Indicates that the BSON serializer should ignore the property on which this attribute is applied.
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.ReadOnlyAttribute">
            <summary>
            表示只读，一般用于视图
            </summary>
        </member>
        <member name="T:MySoft.Data.DbValue">
            <summary>
            数据库值
            </summary>
        </member>
        <member name="P:MySoft.Data.DbValue.DateTime">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="P:MySoft.Data.DbValue.Default">
            <summary>
            返回默认值
            </summary>
        </member>
        <member name="T:MySoft.Data.UnionQuery`1">
            <summary>
            联合查询
            </summary>
        </member>
        <member name="M:MySoft.Data.UnionQuery`1.#ctor(MySoft.Data.QuerySection{`0},MySoft.Data.QuerySection{`0},MySoft.Data.DbProvider,MySoft.Data.DbTrans,System.Boolean)">
            <summary>
            UnionQuery构造函数
            </summary>
            <param name="query1"></param>
            <param name="query2"></param>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
            <param name="isUnionAll"></param>
        </member>
        <member name="M:MySoft.Data.UnionQuery`1.Union(MySoft.Data.QuerySection{`0})">
            <summary>
            联合查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UnionQuery`1.UnionAll(MySoft.Data.QuerySection{`0})">
            <summary>
            联合查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.UnionQuery`1.QueryString">
            <summary>
            QueryString
            </summary>
        </member>
        <member name="P:MySoft.Data.UnionQuery`1.OrderString">
            <summary>
            排序信息
            </summary>
        </member>
        <member name="T:MySoft.Data.UnionItem`1">
            <summary>
            联合查询Item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MySoft.Data.UnionItem`1.Query">
            <summary>
            查询节
            </summary>
        </member>
        <member name="P:MySoft.Data.UnionItem`1.IsUnionAll">
            <summary>
            是否全部Union
            </summary>
        </member>
        <member name="T:MySoft.Data.SQLParameter">
            <summary>
            SQL命令的参数
            </summary>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor">
            <summary>
            初始化SQLParameter
            </summary>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String)">
            <summary>
            初始化SQLParameter
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String,System.Object)">
            <summary>
            初始化OrmParameter
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            初始化OrmParameter
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.Data.Common.DbParameter)">
            <summary>
            通过DbParameter实例化对象
            </summary>
            <param name="dbParameter"></param>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Direction">
            <summary>
            参数方向
            </summary>
        </member>
        <member name="T:MySoft.Data.Cache.DataCacheDependent">
            <summary>
            默认缓存依赖
            </summary>
        </member>
        <member name="M:MySoft.Data.Cache.DataCacheDependent.#ctor(MySoft.Cache.IDataCache,System.String)">
            <summary>
            实例化默认缓存依赖
            </summary>
            <param name="strategy"></param>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.Cache.DataCacheDependent.AddCache``1(System.String,``0,System.Int32)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:MySoft.Data.Cache.DataCacheDependent.RemoveCache``1(System.String)">
            <summary>
            移除缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
        </member>
        <member name="M:MySoft.Data.Cache.DataCacheDependent.GetCache``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="?"></param>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
    </members>
</doc>
